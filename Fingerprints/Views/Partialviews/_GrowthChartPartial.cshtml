@using System.Threading;
@using System.Globalization;
@using Fingerprints;
@using System.Resources;
@using System.Collections;
@using Newtonsoft.Json;
@using Fingerprints.LocalResource;

<script src="~/Content/underscore-min.js"></script>
<script src="~/Scripts/amcharts.js"></script>
<script src="~/Scripts/serial.js"></script>
<script src="~/Scripts/amcharts/plugins/export/export.min.js"></script>

<script src="~/Scripts/amcharts/plugins/export/libs/fabric.js/fabric.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/FileSaver.js/FileSaver.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/pdfmake/pdfmake.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/pdfmake/vfs_fonts.js"></script>

<link href="~/Scripts/amcharts/plugins/export/export.css" rel="stylesheet" />

@{
//Thread.CurrentThread.CurrentUICulture = new CultureInfo("es");
}

<style type="text/css">
    .page-wrapper-change {
        background-image: url(../../Images/body-bg.jpg);
        background-size: cover !important;
        background-position: 100% 100% !important;
    }

    .amcharts-main-div text { /* For IE and Edge label Issue*/
        line-height: 1.4285 !important;
    }

    .download-single {
        display: block;
        overflow: hidden;
        text-indent: -13333337px;
        width: 36px;
        height: 36px;
        padding: 0;
        background-repeat: no-repeat;
        top: -5px;
        right: 15px;
        position: absolute;
        cursor: pointer;
        background-image: url('data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%2211px%22%20height%3D%2214px%22%3E%3Cpath%20d%3D%22M3%2C0%20L8%2C0%20L8%2C5%20L11%2C5%20L5.5%2C10%20L0%2C5%20L3%2C5%20L03%2C0%22%20fill%3D%22%23888%22%2F%3E%3Crect%20x%3D%220%22%20y%3D%2212%22%20fill%3D%22%23888%22%20width%3D%2211%22%20height%3D%222%22%2F%3E%3C%2Fsvg%3E');
        background-color: #fff;
        background-position: center;
        -webkit-box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
        -moz-box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
        box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
        border-radius: 18px;
        margin: 8px 8px 0 10px;
    }

    #modal-edit-growth .modal-dialog-ch {
    width: 70%;
    margin: 20px 15%;
}
    #modal-edit-growth .modal-body,  #modal-edit-growth .modal-body {
    background: #34495e none repeat scroll 0 0;
    border: 6px solid #ffffff;
    border-radius: 3px;
    /* color: #ffffff; */
    float: left;
    padding: 15px 3%;
    position: relative;
    width: 100%;
}
    #modal-edit-growth .max_items_addn, #modal-edit-growth .max_items_addn {
    background: #f1f5f8 none repeat scroll 0 0;
    border: 3px solid #ffffff;
    float: left;
    padding: 10px;
    width: 100%;
    margin-bottom: 20px;
    border-radius: 4px;
}
    #modal-edit-growth .modal-body > h2, #modal-edit-growth .modal-body>h2 {
    margin-top: 10px;
    float: left;
    font-size: 24px;
    font-weight: 600;
    text-align: center;
    width: 100%;
    margin-bottom: 20px;
    color: #fff;
}

    @@media only screen and (max-width: 767px) {
        #page-wrapper h2 {
    font-size: 20px !important;
}
        .page-header-change{font-size: 20px !important;padding-bottom: 15px!important;}
         .page-header-change span
        {
            margin-bottom: 11px!important;
    float: left!important;
        }
    }
    #HeadCircuchart,#Heightchart,
    #Weightchart,#Weight_LengthtChart {
     height:600px;
     width:100%;
     background:#fff;
    }
</style>


<div class="row">

    @*<div class="col-lg-12">
            <h2>

                <button type="button" class="btn btn-default" onclick="window.history.back()" style="margin-top: 10px;background:#9b59b6 !important;border-radius: 0px;">
                    <i class="fa fa-arrow-left" style="padding-right:5px;"></i><span>Back</span>
                </button>
            </h2>
        </div>*@


    <div class="col-lg-12">
        <h2 class="page-header page-header-change" style="border-bottom:5px solid #f9c751!important;color:#fff;text-transform:none;margin-top:0px !important;">
            <span><i class="fa fa-bar-chart-o" aria-hidden="true"></i>&nbsp; @Fingerprints.LocalResource.Resources.GrowthChartof @ViewBag.ClientDetail.ChildName</span>


            @*@if (Session["RoleId"].ToString() == @EnumHelper.GetEnumDescription(RoleEnum.Teacher).ToLowerInvariant())
                {
                    <a href="@Url.Action("Roster", "Teacher")" class="btn pull-right" style="color:#fff;background:#9b59b6">Back to Roster</a>
                }
                else
                {
                    <a href="@Url.Action("Roster", "Roster")" class="btn pull-right" style="color:#fff;background:#9b59b6">Back to Roster</a>
                }*@



            <button type="button" class="glossy-button-button glossy-button-hover pull-right" style="margin-right:5px;" id="download-all">
                @Resources.Export_All
                <span class="glossy-button-after"></span><span class="glossy-button-before"></span>
            </button>
            <select name="input-drop" id="input-drop" class="form-control" style="width:185px;margin-right:10px; display:inline-block;float:right">
                <option value="1" selected>Imperial (Inches/LBS)</option>
                <option value="2">Metrical (CM/Kgs)</option>
            </select>
        </h2>
    </div>
</div>


<div class="row">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.HeadCircumferencevsAge
                    <a class="download-single" data-type="HeadCircuchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>

            </div>
            <div class="panel-body">
                <div id="HeadCircuchart"></div> <!--500px-->
            </div>
        </div>

    </div>

</div>


<div class="row">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.LengthvsAge
                    <a class="download-single" data-type="Heightchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="Heightchart"></div>

            </div>
        </div>

    </div>

</div>

<div class="row" id="weightrow">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.WeightvsAge
                    <a class="download-single" data-type="Weightchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="Weightchart"></div>

            </div>
        </div>

    </div>

</div>


<div class="row">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.WeightvsLength
                    <a class="download-single" data-type="Weight_LengthtChart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="Weight_LengthtChart"></div>
            </div>
        </div>

    </div>

</div>






<script type="text/javascript">


        var _GCUrls = {
            _getGrowthChart: '@Url.Action("GetGrowthChart", "Teacher")?eClientID='
        };
        var _GCcons = {
            eClientId: "@ViewBag.eClientId",
            oneCm: 0.393701,  //1cm =0.393701 inches
            oneKg: 2.20462,   //1kg = 2.20462 pounds

        }

        var _GCObj = {
            init: function () {
                var self = this;
                self.initEvents();
                self.getChartData();

            },
            cons: _GCcons,
            urls: _GCUrls,
            chartComn:{
                minHorizontalGap:24
            },
            data: [],
            gInputType:"1",
            initEvents() {
                var self = this;

                $('[data-toggle="tooltip"]').tooltip();

                $(document).on("change", "#input-drop", function (e) {
                    e.preventDefault();
                    self.gInputType = $(this).val();
                    $("#spinner").show();
                    self.renderChart(self.data);
                });

                $(document).on("click", ".download-single", function (e) {
                    e.preventDefault();
                    var _chartType = $(this).data("type");
                    self.generatePdf(_chartType);
                });

                $(document).on("click", "#download-all", function (e) {
                    e.preventDefault();

                   // $("input[name='GridHtml']").val($("#weightrow").html());

                    // $("#exform").submit();
                    self.generatePdf('All');

                });
            },
            generatePdf: function (charts) {
                var self = this;
                $("#spinner").show();

                var ids = [];
                if (charts == 'All') {
                    ids = ["HeadCircuchart", "Heightchart", "Weightchart", "Weight_LengthtChart"];
                } else {

                    ids.push(charts);
                }

                var charts = {}
                var charts_remaining = ids.length;
                for (var i = 0; i < ids.length; i++) {
                    for (var x = 0; x < AmCharts.charts.length; x++) {
                        if (AmCharts.charts[x].div.id == ids[i])
                            charts[ids[i]] = AmCharts.charts[x];
                    }
                }

                // Trigger export of each chart
                for (var x in charts) {
                    if (charts.hasOwnProperty(x)) {
                        var chart = charts[x];
                        chart["export"].capture({}, function () {
                            this.toPNG({}, function (data) {

                                // Save chart data into chart object itself
                                this.setup.chart.exportedImage = data;

                                // Reduce the remaining counter
                                charts_remaining--;

                                // Check if we got all of the charts
                                if (charts_remaining == 0) {
                                    // Yup, we got all of them
                                    // Let's proceed to putting PDF together
                                    // generatePDF();

                                    var _layout = self.generateLayout(charts,ids);

                                    chart["export"].toPDF(_layout, function (data) {
                  this.download(data, "application/pdf", "GrowthChart of ".concat("@ViewBag.ClientDetail.ChildName",".pdf"));
                                    });

                                    $("#spinner").hide();
                                }
                            });
                        });
                    }
                }


            },

            EditChildChrowth:function(data){

                console.log("data from chart", data);

                if (!data.hasOwnProperty("Age") || !data.hasOwnProperty("Height")) return false;

                $("#modal-edit-growth").modal("show")

            },
            generateLayout: function (charts, ids){


                var layout = {
                    "content": [],
                    footer: function (currentPage, pageCount) {
                        //return currentPage.toString() + ' of ' + pageCount;
                        return { text: currentPage, alignment: 'center' };
                    },
                };

                layout.content.push({
                    "text": "@Fingerprints.LocalResource.Resources.GrowthChartof  @ViewBag.ClientDetail.ChildName",
                    "fontSize": 15,
                    margin: [0, 0, 0, 25],
                    decoration: 'underline',
                });

                layout.styles = {
                    header: {
                        fontsize: '20px', color: '#333', alignment: 'center', bold: true
                    }
                };
                ids.forEach(function (obj, i) {
                    //ids = ["HeadCircuchart", "Heightchart", "Weightchart", "Weight_LengthtChart"];
                    var _chartHeadtxt = "";
                    if (obj == "HeadCircuchart") {
                        //  _chartHeadtxt = "Head Circumference vs Age";
                        _chartHeadtxt = _langList.HeadCircumferencevsAge;
                    } else if (obj == "Heightchart") {
                       // _chartHeadtxt = "Length vs Age";
                        _chartHeadtxt = _langList.LengthvsAge;
                    } else if (obj == "Weightchart") {
                        //_chartHeadtxt = "Weight vs Age"
                        _chartHeadtxt = _langList.WeightvsAge
                    } else {
                        // _chartHeadtxt = "Weight vs Length";
                        _chartHeadtxt = _langList.WeightvsLength
                    }
                    layout.content.push({
                        "text": _chartHeadtxt,
                        style: 'header',
                        margin:i == 1 ? [0,50,0,0] : i == 3 ? [0,50,0,0] : []

                    });
                    layout.content.push({
                        "image": charts[obj].exportedImage,
                        "fit": i == 0 ? [523, 300] : i == 1 ? [523, 300] : [523, 300],
                        pageBreak: i == 1 ? 'after' : "",

                        });
                });
                //layout.content.push({
                //    "image": charts["HeadCircuchart"].exportedImage,
                //    "fit": [523, 300]
                //});

                //layout.content.push({
                //    "image": charts["Heightchart"].exportedImage,
                //    "fit": [600, 300]
                //});

                return layout;

            },
            getChartData: function () {
                var self = this;

                $.ajax({
                    type: 'POST',
                    url: self.urls._getGrowthChart.concat(self.cons.eClientId),
                    contentType: 'application/json',
                    dataType: 'json',
                    beforeSend: function () { $("#spinner").show(); },
                    success: function (data) {
                        //self.data = data;
                        self.renderChart(data);
                    },
                    error: function () {

                    },
                    complete: function () {
                        $("#spinner").hide();
                    }
                })

            },
            convertCMtoInch: function (data,inputtype) {
                var self = this;
                var val = 0;
                if (inputtype == "2") {
                    val = parseFloat(data);
                } else {
                    val = parseFloat(data) * self.cons.oneCm;
                }
                return val.toFixed(2);
            },
            convertKGtoLbs: function (data, inputtype) {
                var self = this;
                var val = 0;
                if (inputtype == "2") {
                    val = parseFloat(data);
                } else {
                    val = parseFloat(data) * self.cons.oneKg;
                }
                return val.toFixed(2);
            },
            convertInchtoCM:function(data,type){
                var self = this;
                var val = 0;
                val = parseFloat(data) * 2.54;

                return val.toFixed(2);
            },
            convertLbstoKG:function(data){
                var self = this;
                var val = 0;

                val = parseFloat(data) * 0.453592;

                return val.toFixed(2);
            },
            roundHalf: function (n) {
                n = parseFloat(n);
                return Math.round(n * 2) / 2;
            },
            renderChart: function (data) {

                var self = this;
                var HeadCircData = [];

                if (!data.ChildGrowth) { data.ChildGrowth = []; }

                data.DTHeadCircuGrowth.forEach(function (obj, k) {

                    var _tempObj = {
                        P3: self.convertCMtoInch(obj.P3,self.gInputType),
                        P5: self.convertCMtoInch(obj.P5,self.gInputType),
                        P10: self.convertCMtoInch(obj.P10,self.gInputType),
                        P25: self.convertCMtoInch(obj.P25,self.gInputType),
                        P50: self.convertCMtoInch(obj.P50,self.gInputType),
                        P75: self.convertCMtoInch(obj.P75,self.gInputType),
                        P90: self.convertCMtoInch(obj.P90,self.gInputType),
                        P95: self.convertCMtoInch(obj.P95,self.gInputType),
                        P98: self.convertCMtoInch(obj.P98,self.gInputType),
                        // Age: obj.AgeInMonth
                        Age: parseFloat(obj.AgeInMonth)
                        //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                    };

                  /*  data.ChildGrowth.forEach(function (orObj, ind) {

                        if (orObj.Age == parseInt(obj.AgeInMonth) && orObj.HeadCirc > 0) {
                            //   _tempObj.HeadCirc = self.convertCMtoInch(orObj.HeadCirc,self.gInputType);
                            if (orObj.InputType == "2" && self.gInputType == "1") {  //data in cm but option in Inch
                                _tempObj.HeadCirc = self.convertCMtoInch(orObj.HeadCirc, self.gInputType);
                            } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Inch but option in CM
                                _tempObj.HeadCirc = self.convertInchtoCM(orObj.HeadCirc);
                            }
                            else {
                                _tempObj.HeadCirc = orObj.HeadCirc;
                            }
                        }


                    });*/

                    // if ((_tempObj.Age % 2) == 0) {

                    HeadCircData.push(_tempObj);
                    //}

                });


                data.ChildGrowth.forEach(function (childObj, i) {
                    var _inserted = false;
                    HeadCircData.forEach(function (stdObj, k) {
                        var _HeadCirc = childObj.HeadCirc;

                        if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                            _HeadCirc = self.convertCMtoInch(childObj.HeadCirc);
                        } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                            _HeadCirc = self.convertInchtoCM(childObj.HeadCirc, 1);
                        }

                        if (stdObj.Age == parseFloat(childObj.Age) && childObj.HeadCirc > 0 && !_inserted) {

                            HeadCircData[k]["HeadCirc"] = _HeadCirc;
                            HeadCircData[k]["AssessmentDate"] = childObj.AssessmentDate;
                            _inserted = true;

                        } else if (childObj.HeadCirc > 0 && !_inserted && _.where(HeadCircData, { Age: childObj.Age }).length == 0) {

                            HeadCircData.push({ HeadCirc: _HeadCirc, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                            _inserted = true;

                        }
                    });

                });

                HeadCircData = _.sortBy(HeadCircData, 'Age');






               // console.log(HeadCircData);


                self.data = data;

                // var HCY = self.gInputType == "2" ? "HeadCirc.(CM)" : "HeadCirc.(Inch)";
                var HCY = self.gInputType == "2" ? "" + _langList.HeadCircu + ".(CM)" : "" + _langList.HeadCircu +".(Inch)";

                var chart = AmCharts.makeChart("HeadCircuchart", {

                    "hideCredits": true,
                    "type": "serial",
                    //"theme": "light",
                    "theme": "absenceReportTheme", //custom theme written in light.js
                    "legend": {
                        "useGraphSettings": true,
                        "switchable": true, //when click legend graph is hide. default:true
                        "valueAlign": "left", //alignment of value of legend(cannot move to left of label)
                    },
                    "dataProvider": HeadCircData,
                    "valueAxes": [

                        {
                            "logarithmic": false,
                            "dashLength": 1,
                            "guides": [
                            ],
                            "position": "left",
                            "autoGridCount": false,
                            'minimum': 0,
                            //"balloon": {
                            //    "enabled": false
                            //},
                        }
                    ],
                    "graphs": [
                        {
                            "bullet": "round",
                            "id": "g1",
                            "bulletBorderAlpha": 1,
                            // "bulletColor": "#040404",
                           "bulletColor":"#FFFFFF",
                            "bulletSize": 8,
                            "lineThickness": 2,
                            //  "title": "Child HeadCirc.",
                            "title":"@Resources.HeadCircu",
                            "type": "smoothedLine",
                            "useLineColorForBulletBorder": true,
                            "valueField": "HeadCirc",
                            //  "lineColor": "#115ea6",
                            "lineColor":"#040404",
                            "lineAlpha": 1,
                            // "balloonText": "<b>[[category]]: [[value]]<br><a href='https://google.com/' target='_blank'>Google</a></b>",
                            "balloonFunction": function (item, content) {
                                console.log(item, content);
                                var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.HeadCirc + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                                return html;
                            },
                            "balloon": {
                                "enabled": true,
                                
                                "fixedPosition": true,
                               
                            }
                        },
    

                          @{ var Percentail = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

                              //var _clrs = new string[9] { "#b7072c" , "#e6865c", "#ffd13e", "#acc052", "#70c7bd", "#acc052", "#ffd13e", "#e6865c",  "#b7072c" };
                              var _clrs = new string[9] { "#86A8FA", "#8DD663", "#F9AC78", "#FDEA72", "#E39698", "#EAC7EA", "#889498", "#B0D9E5", "#A0A0A0" };
                              int i = 0;
}
                      @foreach (var item in Percentail) {

                          <text>
                          {
                              "valueAxis": "@item",
                              //"lineColor": "#b7072c",
                              "lineColor": "@_clrs[i]",
                              //"lineColor": "#1295ba",
                              // "lineThickness": 2,
                              "lineThickness": 1.5,
                              "bullet": "",
                              "bulletBorderThickness": 1,
                              "hideBulletsCount": 30,
                              "title": "@item",
                              "valueField": "@item",
                              "label": "OHS Average",
                              //"dashLength": 6,
                              "fillAlphas": 0,
                              "balloon": {
                                  "enabled": false
                              },
                          },
                          </text>
                          i++;
                      }

                    ],
                  //  "chartScrollbar": {},
                    "chartCursor": {
                        "valueLineEnabled": true,
                    //    "valueLineBalloonEnabled": true,
                        "valueLineAlpha": 0.5,
                       "fullWidth": true,
                        "cursorAlpha": 0.05,
                    //     "categoryBalloonEnabled": false,
                        //"balloonPointerOrientation": "vertical",
                        "categoryBalloonEnabled": false,
                        "balloonPointerOrientation": "vertical",
                       // "cursorAlpha": 0,
                        "zoomable": false
                    },
                    "categoryField": "Age",
                    "categoryAxis": {
                        "gridPosition": "start",
                        "autoGridCount": true,
                        "minHorizontalGap": self.chartComn.minHorizontalGap,
                        // "title": "Age(Month)"
                        "title": _langList.Age +'('+_langList.Month + ')'
                    },
                    "valueAxes": [
     {
         //"title": "HeadCirc.("+ self.gInputType== "2" ? 'CM' :  'Inch'+")"
         "title" : HCY
     }
                    ],
                    "export": {
                        "enabled": true,
                        "menu": [{
                            "class": "export-main",
                            // "menu": ["PDF"]
                            "menu": []
                        }]
                    },

                });





                var HeightData = [];


                data.DTLengthGrowth.forEach(function (obj, k) {

                    var _tempObj = {
                        P3: self.convertCMtoInch(obj.P3,self.gInputType),
                        P5: self.convertCMtoInch(obj.P5, self.gInputType),
                        P10: self.convertCMtoInch(obj.P10, self.gInputType),
                        P25: self.convertCMtoInch(obj.P25, self.gInputType),
                        P50: self.convertCMtoInch(obj.P50, self.gInputType),
                        P75: self.convertCMtoInch(obj.P75, self.gInputType),
                        P90: self.convertCMtoInch(obj.P90, self.gInputType),
                        P95: self.convertCMtoInch(obj.P95, self.gInputType),
                        P98: self.convertCMtoInch(obj.P98, self.gInputType),
                        Age: parseFloat( obj.AgeInMonth)
                        //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                    };

                  /*  data.ChildGrowth.forEach(function (orObj, ind) {

                          if (orObj.Age == parseInt(obj.AgeInMonth) && orObj.Height > 0) {

                            //  _tempObj.Height = orObj.Height;
                            if (orObj.InputType == "2" && self.gInputType == "1") {  //data in cm but option in Inch
                                _tempObj.Height = self.convertCMtoInch(orObj.Height, self.gInputType);
                            } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Inch but option in CM
                                _tempObj.Height = self.convertInchtoCM(orObj.Height);
                            }
                            else {
                                _tempObj.Height = orObj.Height;
                            }
                          }
                          //else if (orObj.Height > 0) {

                          //    _tempObj.Height = orObj.Height;
                          //    if(!_tempObj.Age){
                          //        _tempObj.Age = orObj.Age;
                          //        }
                          //}


                    });*/

                    // if ((_tempObj.Age % 2) == 0) {

                    HeightData.push(_tempObj);
                    //}

                });

                data.ChildGrowth.forEach(function (childObj, i) {
                    var _inserted = false;
                    HeightData.forEach(function (stdObj, k) {

                        var _Height = childObj.Height;

                        if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                            _Height = self.convertCMtoInch(childObj.Height);
                        } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                            _Height = self.convertInchtoCM(childObj.Height, 1);
                        }

                        if (stdObj.Age == parseFloat(childObj.Age) && childObj.Height > 0 && !_inserted) {

                            HeightData[k]["Height"] = _Height;
                            HeightData[k]["AssessmentDate"] = childObj.AssessmentDate;
                            _inserted = true;

                        } else if (childObj.Height > 0 && !_inserted && _.where(HeightData, { Age: childObj.Age }).length == 0) {

                            HeightData.push({ Height: _Height, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                            _inserted = true;

                        }
                    });

                });

                HeightData = _.sortBy(HeightData, 'Age');

              //  console.log("height val", HeightData);

                // var HYLabel = self.gInputType == "2" ? "Length(CM)" : "Length(Inch)";
                var HYLabel = self.gInputType == "2" ?  '@Resources.LengthofCM' : '@Resources.LengthofInch';

                var heighchart = AmCharts.makeChart("Heightchart", {
                    "hideCredits": true,
                    "type": "serial",
                    //"theme": "light",
                    "theme": "absenceReportTheme", //custom theme written in light.js
                    "legend": {
                        "useGraphSettings": true,
                        "switchable": true, //when click legend graph is hide. default:true
                        "valueAlign": "left", //alignment of value of legend(cannot move to left of label)
                    },
                    "dataProvider": HeightData,
                    "valueAxes": [

                        {
                            "logarithmic": false,
                            "dashLength": 1,
                            "guides": [
                            ],
                            "position": "left",
                            "autoGridCount": false,
                            'minimum':0
                        }],
                    "graphs": [
                        {
                            "bullet": "round",
                            "id": "g1",
                            "bulletBorderAlpha": 1,
                            "bulletColor": "#FFFFFF",

                            "bulletSize": 8,
                            "lineThickness": 2,
                            // "title": "Child Length.",
                            "title":_langList.ChildLength,
                            "type": "smoothedLine",
                            "useLineColorForBulletBorder": true,
                            "valueField": "Height",
                            "lineColor": "#040404",
                            "balloonFunction": function (item, content) {
                               // console.log(item, content);
                                var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.Height + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                                return html;
                            },
                            "balloon": {
                                "enabled": true,

                                "fixedPosition": true,

                            }
                        },


                          @{ var Percentail2 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

                              // var _clrs2 = new string[9] { "#b7072c" , "#e6865c", "#ffd13e", "#acc052", "#70c7bd", "#acc052", "#ffd13e", "#e6865c",  "#b7072c" };
                             // var _clrs = new string[9] { "#86A8FA", "#8DD663", "#F9AC78", "#FDEA72", "#E39698", "#EAC7EA", "#889498", "#B0D9E5", "#A0A0A0" };
                              int k = 0;
            }
                      @foreach (var item in Percentail2) {

                          <text>
                          {
                              "valueAxis": "@item",
                              //"lineColor": "#b7072c",
                              "lineColor": "@_clrs[k]",
                              //"lineColor": "#1295ba",
                              "lineThickness": 2,
                              "bullet": "",
                              "bulletBorderThickness": 1,
                              "hideBulletsCount": 30,
                              "title": "@item",
                              "valueField": "@item",
                              "label": "OHS Average",
                              //"dashLength": 6,
                              "fillAlphas": 0,
                              "balloon": {
                                  "enabled": false
                              },
                             // "visibleInLegend":false, --show or hide legend label
                          },
                          </text>
                          k++;
                      }

                    ],
                   // "chartScrollbar": {},
                    "chartCursor": {
                        "valueLineEnabled": true,
                        "valueLineBalloonEnabled": true,
                        "valueLineAlpha": 0.5,
                        "fullWidth": true,
                        "cursorAlpha": 0.05,
                        "listeners": [{
                            "event": "changed",
                            "method": function (ev) {
                                // Log last cursor position
                                ev.chart.lastCursorPosition = ev.index;
                            }
                        }]
                    },
                    "categoryField": "Age",
                    "export": {
                        "enabled": true
                    },
                    "categoryAxis": {
                        "gridPosition": "start",
                        "minHorizontalGap": self.chartComn.minHorizontalGap,
                        //  "title": "Age(Month)"
                        "title": _langList.Age + '(' + _langList.Month + ')'
                    },
                    "valueAxes": [
     {
         // "title": "Length(Inch)",
         "title": HYLabel,
         //"minimum":0,
         "minimum": self.gInputType == "2" ?  35 : 15 ,
     }
                    ],
                    "export": {
                        "enabled": true,
                        "menu": [{
                            "class": "export-main",
                            // "menu": ["PDF"]
                            "menu": []
                        }]
                    },
                   /* "listeners": [{
                        "event": "init",
                        "method": function (ev) {
                            // Set a jQuery click event on chart area
                            jQuery(ev.chart.chartDiv).on("click", function (e) {
                                // Check if last cursor position is present
                                if (!isNaN(ev.chart.lastCursorPosition)) {
                                    var _CrData =  ev.chart.dataProvider[ev.chart.lastCursorPosition];
                                    console.log("clicked on ", _CrData);
                                    self.EditChildChrowth(_CrData);
                                }
                            })
                        }
                    }]*/



                });




                var WeightData = [];


                data.DTWeightGrowth.forEach(function (obj, k) {

                    var _tempObj = {
                        P3: self.convertKGtoLbs(obj.P3,self.gInputType),
                        P5: self.convertKGtoLbs(obj.P5,self.gInputType),
                        P10: self.convertKGtoLbs(obj.P10, self.gInputType),
                        P25: self.convertKGtoLbs(obj.P25, self.gInputType),
                        P50: self.convertKGtoLbs(obj.P50, self.gInputType),
                        P75: self.convertKGtoLbs(obj.P75, self.gInputType),
                        P90: self.convertKGtoLbs(obj.P90, self.gInputType),
                        P95: self.convertKGtoLbs(obj.P95, self.gInputType),
                        P98: self.convertKGtoLbs(obj.P98, self.gInputType),
                        // Age: obj.AgeInMonth
                        Age: parseFloat(obj.AgeInMonth)
                        //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                    };
/*
                    data.ChildGrowth.forEach(function (orObj, ind) {

                        //if (orObj.Age == parseInt(obj.AgeInMonth) && orObj.Weight > 0) {
                        //    _tempObj.Weight = orObj.Weight;
                        //}

                        if (orObj.Age == parseInt(obj.AgeInMonth) && orObj.Weight > 0) {

                            if (orObj.InputType == "2" && self.gInputType == "1") {  //data in kg but g option in lbs
                                _tempObj.Weight = self.convertKGtoLbs(orObj.Weight, self.gInputType);
                            } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Lbs but option in KG
                                _tempObj.Weight = self.convertLbstoKG(orObj.Weight);
                            }
                            else {
                                _tempObj.Weight = orObj.Weight;
                            }
                        }

                    });
                    */

                    // if ((_tempObj.Age % 2) == 0) {

                    WeightData.push(_tempObj);
                    //}

                });


                data.ChildGrowth.forEach(function (childObj, i) {
                    var _inserted = false;
                    WeightData.forEach(function (stdObj, k) {


                        var _Weight = childObj.Weight;

                        if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                            //  _Weight = self.convertCMtoInch(childObj.Weight);
                            _Weight = self.convertKGtoLbs(childObj.Weight)
                        } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                            // _Weight = self.convertInchtoCM(childObj.Weight, 1);
                            _Weight = self.convertLbstoKG(childObj.Weight);
                        }

                        if (stdObj.Age == parseFloat(childObj.Age) && childObj.Weight > 0 && !_inserted) {

                            WeightData[k]["Weight"] = _Weight;
                            WeightData[k]["AssessmentDate"] = childObj.AssessmentDate;
                            _inserted = true;

                        } else if (childObj.Weight > 0 && !_inserted && _.where(WeightData, { Age: childObj.Age }).length == 0) {

                            WeightData.push({ Weight: _Weight, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                            _inserted = true;

                        }
                    });

                });

                WeightData = _.sortBy(WeightData, 'Age');


               // console.log(WeightData);


                //  var WYLabel = self.gInputType == "2" ? "Weight(KG)" : "Weight(Pound)";
                var WYLabel = self.gInputType == "2" ? '@Resources.Weight_Kg' : '@Resources.Weight_Pound';

                var weightchart = AmCharts.makeChart("Weightchart", {
                    "hideCredits": true,
                    "type": "serial",
                    //"theme": "light",
                    "theme": "absenceReportTheme", //custom theme written in light.js
                    "legend": {
                        "useGraphSettings": true,
                        "switchable": true, //when click legend graph is hide. default:true
                        "valueAlign": "left", //alignment of value of legend(cannot move to left of label)
                    },
                    "dataProvider": WeightData,
                    "valueAxes": [

                        {
                            "logarithmic": false,
                            "dashLength": 1,
                            "guides": [
                            ],
                            "position": "left",
                            "autoGridCount": false,
                            'minimum': 0
                        }],
                    "graphs": [
                        {
                            "bullet": "round",
                            "id": "g1",
                            "bulletBorderAlpha": 1,
                            "bulletColor": "#FFFFFF",
                            "bulletSize": 8,
                            "lineThickness": 2,
                            // "title": "Child Weight",
                            "title": _langList.Child_Weight,
                            "type": "smoothedLine",
                            "useLineColorForBulletBorder": true,
                            "valueField": "Weight",
                            "lineColor": "#040404",
                            "balloonFunction": function (item, content) {
                                console.log(item, content);
                                var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.Weight + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                                return html;
                            },
                            "balloon": {
                                "enabled": true,

                                "fixedPosition": true,

                            }
                        },


                          @{ var Percentail3 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

                              // var _clrs3 = new string[9] { "#b7072c" , "#e6865c", "#ffd13e", "#acc052", "#70c7bd", "#acc052", "#ffd13e", "#e6865c",  "#b7072c" };
                             // var _clrs = new string[9] { "#86A8FA", "#8DD663", "#F9AC78", "#FDEA72", "#E39698", "#EAC7EA", "#889498", "#B0D9E5", "#A0A0A0" };
                              int l = 0;
            }
                      @foreach (var item in Percentail3) {

                          <text>
                          {
                              "valueAxis": "@item",
                              //"lineColor": "#b7072c",
                              "lineColor": "@_clrs[l]",
                              //"lineColor": "#1295ba",
                              "lineThickness": 2,
                              "bullet": "",
                              "bulletBorderThickness": 1,
                              "hideBulletsCount": 30,
                              "title": "@item",
                              "valueField": "@item",
                              "label": "OHS Average",
                              //"dashLength": 6,
                              "fillAlphas": 0,
                              "balloon": {
                                  "enabled": false
                              },
                          },
                          </text>
                          l++;
                      }

                    ],
                    //"chartScrollbar": {},
                    "chartCursor": {
                        "valueLineEnabled": true,
                        "valueLineBalloonEnabled": true,
                        "valueLineAlpha": 0.5,
                        "fullWidth": true,
                        "cursorAlpha": 0.05
                    },
                    "categoryField": "Age",
                    "export": {
                        "enabled": true
                    },
                    "categoryAxis": {
                        "gridPosition": "start",
                        "minHorizontalGap": self.chartComn.minHorizontalGap,
                        //  "title": "Age(Month)"
                        "title": _langList.Age+"("+_langList.Month+")",
                    },
                    "valueAxes": [
     {
         //"title": "Weight(Pound)",
         "title":WYLabel,
         "minimum":0
     }
                    ],
                    "export": {
                        "enabled": true,
                        "menu": [{
                            "class": "export-main",
                            // "menu": ["PDF"]
                            "menu": []
                        }]
                    },
                });

                // Weight - LengthtChart



                var WeightLengthData = [];



                data.DTWeightLengthGrowth.forEach(function (obj, k) {

                    var _tempObj = {
                        P3: self.convertKGtoLbs(obj.P3,self.gInputType),
                        P5: self.convertKGtoLbs(obj.P5,self.gInputType),
                        P10: self.convertKGtoLbs(obj.P10, self.gInputType),
                        P25: self.convertKGtoLbs(obj.P25, self.gInputType),
                        P50: self.convertKGtoLbs(obj.P50, self.gInputType),
                        P75: self.convertKGtoLbs(obj.P75, self.gInputType),
                        P90: self.convertKGtoLbs(obj.P90, self.gInputType),
                        P95: self.convertKGtoLbs(obj.P95, self.gInputType),
                        P98: self.convertKGtoLbs(obj.P98, self.gInputType),
                        //Age: obj.AgeInMonth
                        //Length: self.convertCMtoInch(obj.Length)
                       Length:parseFloat( self.convertCMtoInch(obj.Length,self.gInputType))

                        //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                    };

                    //data.ChildGrowth.forEach(function (orObj, ind) {

                    //    if (orObj.Age == parseInt(obj.AgeInMonth) && orObj.Weight > 0) {
                    //        _tempObj.Weight = orObj.Weight;
                    //    }


                    //});
/*
                    data.ChildGrowth.forEach(function (orObj, ind) {


                        //var _stdLength = orObj.Height * 2.54; //to cm
                        //var _stdLength = self.convertCMtoInch(orObj.Height, self.gInputType);

                        var _stdLength = orObj.Height;

                        if (orObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                            _stdLength = self.convertCMtoInch(orObj.Height);
                           
                        } else if (orObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                            _stdLength = self.convertInchtoCM(orObj.Height, 1);
                           // _Weight = self.convertLbstoKG(childObj.Weight);
                        }
                        

                        // //if (parseFloat(orObj.Height).toFixed(1) == _stdLength.toFixed(1) && orObj.Weight > 0) {
                        // if (self.roundHalf(_stdLength) == self.roundHalf(_tempObj.Length) && orObj.Weight > 0) {
                       if (parseFloat(_stdLength).toFixed(1) == parseFloat(_tempObj.Length).toFixed(1)) {
                            //   _tempObj.ChildWeight = orObj.Weight;

                            if (orObj.InputType == "2" && self.gInputType == "1") {  //data in kg but g option in lbs
                                _tempObj.ChildWeight = self.convertKGtoLbs(orObj.Weight, self.gInputType);
                            } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Lbs but option in KG
                                _tempObj.ChildWeight = self.convertLbstoKG(orObj.Weight);
                            }
                            else {
                                _tempObj.ChildWeight = orObj.Weight;
                            }
                            _tempObj.AssessmentDate = orObj.AssessmentDate;
                       }


                    });

                    */

                    // if ((_tempObj.Age % 2) == 0) {

                    WeightLengthData.push(_tempObj);
                    //}

                });


                data.ChildGrowth.forEach(function (orObj, ind) {
                    var _stdLength = orObj.Height;
                    var _stdWeight = orObj.Weight;

                    if (orObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                        _stdLength = self.convertCMtoInch(orObj.Height);

                    } else if (orObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                        _stdLength = self.convertInchtoCM(orObj.Height, 1);
                        // _Weight = self.convertLbstoKG(childObj.Weight);
                    }

                    if (orObj.InputType == "2" && self.gInputType == "1") {  //data in kg but g option in lbs
                        _stdWeight = self.convertKGtoLbs(orObj.Weight, self.gInputType);
                    } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Lbs but option in KG
                        _stdWeight = self.convertLbstoKG(orObj.Weight);
                    }
                    

                    console.log(_stdLength, orObj);

                    if (_stdWeight && _stdLength) {
                        WeightLengthData.push({ ChildWeight: _stdWeight, AssessmentDate: orObj.AssessmentDate, Length: parseFloat(_stdLength) });
                    }
                  /*  WeightLengthData.forEach(function (obj, k) {

                        
                        console.log(_stdLength, obj.Length);
                       

                        if (orObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                            _stdLength = self.convertCMtoInch(orObj.Height);

                        } else if (orObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                            _stdLength = self.convertInchtoCM(orObj.Height, 1);
                            // _Weight = self.convertLbstoKG(childObj.Weight);
                        }

                        


                    });
                    */

                });

                WeightLengthData = _.sortBy(WeightLengthData, 'Length');

                console.log('weight length',WeightLengthData);


                //var WLXLabel = self.gInputType == "2" ? "Length(CM)" : "Length(Inch)";
                //var WLYLabel = self.gInputType == "2" ? "Weight(KG)" : "Weight(Pound)";
                var WLXLabel = self.gInputType == "2" ? "@Resources.LengthofCM" : "@Resources.LengthofInch";
                var WLYLabel = self.gInputType == "2" ? "@Resources.Weight_Kg" : "@Resources.Weight_Pound";

                var WeightLengthtChart = AmCharts.makeChart("Weight_LengthtChart", {
                    "hideCredits": true,
                    "type": "serial",
                    //"theme": "light",
                    "theme": "absenceReportTheme", //custom theme written in light.js
                    "legend": {
                        "useGraphSettings": true,
                        "switchable": true, //when click legend graph is hide. default:true
                        "valueAlign": "left", //alignment of value of legend(cannot move to left of label)
                    },
                    "dataProvider": WeightLengthData,
                    "valueAxes": [

                        {
                            "logarithmic": false,
                            "dashLength": 1,
                            "guides": [
                            ],
                            "position": "left",
                            "autoGridCount": false
                        }],
                    "graphs": [
                        {
                            "bullet": "round",
                            "id": "g1",
                            "bulletBorderAlpha": 1,
                            "bulletColor": "#FFFFFF",
                            "bulletSize": 8,
                            "lineThickness": 2,
                            //  "title": "Child Length",
                            "title": _langList.Child_Length,
                            "type": "smoothedLine",
                            "useLineColorForBulletBorder": true,
                            "valueField": "ChildWeight",
                            "lineColor": "#040404",
                            "balloonFunction": function (item, content) {
                                console.log(item, content);
                                var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Length : ' + item.dataContext.Length + '</b> </p><p><b> Weight :' + item.dataContext.ChildWeight + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                                return html;
                            },
                            "balloon": {
                                "enabled": true,

                                "fixedPosition": true,

                            }
                        },


                          @{ var Percentail4 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

                              //var _clrs4 = new string[9] { "#b7072c" , "#e6865c", "#ffd13e", "#acc052", "#70c7bd", "#acc052", "#ffd13e", "#e6865c",  "#b7072c" };
                            
                              int m = 0;
            }
                      @foreach (var item in Percentail4) {

                          <text>
                          {
                              "valueAxis": "@item",
                              //"lineColor": "#b7072c",
                              "lineColor": "@_clrs[m]",
                              //"lineColor": "#1295ba",
                              "lineThickness": 2,
                              "bullet": "",
                              "bulletBorderThickness": 1,
                              "hideBulletsCount": 30,
                              "title": "@item",
                              "valueField": "@item",
                              "label": "OHS Average",
                            //  "dashLength": 6,
                              "fillAlphas": 0,
                              "balloon": {
                                  "enabled": false
                              },
                              
                          },
                          </text>
                          m++;
                      }

                    ],
                   // "chartScrollbar": {},
                    "chartCursor": {
                        "valueLineEnabled": true,
                        "valueLineBalloonEnabled": true,
                        "valueLineAlpha": 0.5,
                        "fullWidth": true,
                        "cursorAlpha": 0.05
                    },
                    "categoryField": "Length",
                    "export": {
                        "enabled": true
                    },
                    "categoryAxis": {
                        "gridPosition": "start",
                        //  "title": "Length(Inch)"
                        "title": WLXLabel,
                    },
                    "valueAxes": [
     {
         // "title": "Weight(pounds)",
         "title": WLYLabel,
         "minimum":0
     }
                    ],
                    "export": {
                        "enabled": true,
                        "menu": [{
                            "class": "export-main",
                            "menu": []
                        }]
                    },
                });




                //chart.addListener("rendered", function (zoomChart) {

                //    console.log(zoomChart);
                //    if (chart) {
                //        chart.zoomToIndexes(dataLength - 8, dataLength);

                //    }

                //});


                $("#spinner").hide();
            },


        };



    $(document).ready(function () {

        setTimeout(function () {
            _GCObj.init();
        }, 0);

        });


</script>



<div class="modal fade scroll-modal" id="modal-edit-growth" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-ch">
        <div class="modal-content">

            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal"><img src="/Content/CaseNote/images/close.png"></button>
                <h2 id="CaseNoteHeading" class="extra-title muted">Edit Child Growth</h2>
                <form id="formEditInkind" enctype="multipart/form-data">

                    <div class="max_items_addn popup-addn-scroll">




                        <div class="form-group col-xs-12">
                            <label for="inkindActivityDate" class="col-md-4 col-lg-2 col-xs-12" style="color:#295b8f;">Assessment Date <sup style="color:red;">*</sup></label>
                            <div class="col-md-7 col-sm-11 col-lg-5 col-xs-12">

                                <div class="input-group date">
                                    <input type="text" class="form-control ersa-date-input" maxlength="12" placeholder="MM/DD/YYYY" id="inkindActivityDate">
                                    <span class="input-group-addon datepicker-icon" id="1" style="cursor:pointer;">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>



                            </div>
                            @*<div class="col-lg-5">
                                <img src="/Images/info.png" id="imageinfoInkindDates" title="Dates Allowed" data-toggle="popover" style="height: 20px;width :20px;padding: 0;cursor:pointer;">

                            </div>*@
                        </div>

                        <div class="form-group col-xs-12">
                            <label for="inkindActivityDate" class="col-md-4 col-lg-2 col-xs-12" style="color:#295b8f;">Height <sup style="color:red;">*</sup></label>
                            <div class="col-md-7 col-sm-11 col-lg-5 col-xs-12">

                                <input type="text" class="form-control"/>



                            </div>
                            @*<div class="col-lg-5">
                <img src="/Images/info.png" id="imageinfoInkindDates" title="Dates Allowed" data-toggle="popover" style="height: 20px;width :20px;padding: 0;cursor:pointer;">

            </div>*@
                        </div>




                        </div>



                    <div class="form-group final-btn text-center glossy_btn adddivspace">

                        <button class="glossy-button-button button-green" type="button" id="btn-modal-submit">
                            <span class="glossy-button-after"></span>
                            <span class="glossy-button-before"></span>
                            Save
                        </button>
                        <button class="glossy-button-button button-red" type="button" id="btn-modal-cancel" data-dismiss="modal">
                            <span class="glossy-button-after"></span>
                            <span class="glossy-button-before"></span>
                            Exit
                        </button>
                    </div>
                    </form>
                    </div>

            </div></div></div>
