@model FingerprintsModel.FamilyHouseless

@{

    bool homeFound = Convert.ToBoolean(ViewBag.HomeFound);

    @section Title{
        @(homeFound ? "Home Found" : "Household Details")
    }

    Layout = "~/Views/Shared/AgencyStaffLayout.cshtml";

}


@section Style{


    <link href="~/Content/css/householddetails.css" rel="stylesheet" />

    <style>
        /**** Multiple Documents upload  ****/

        .multiple-camera-modal video {
            background: #222;
            margin: 0 0 20px 0;
            width: 100%;
            height: 100%;
        }

        .mob-div-pad {
            height: 260px;
            margin-bottom: 30px;
        }

        .multiple-camera-modal .setup-snap {
            position: absolute;
            bottom: 19px;
            left: 0;
            right: 0;
            margin: auto;
            text-align: center;
        }

            .multiple-camera-modal .setup-snap a {
                color: #fff;
                width: 100px;
                height: 100px;
                border: 2px solid #fff;
                padding: 11px 12px;
                border-radius: 46px;
                font-size: 24px;
                cursor: pointer;
            }

        .multiple-camera-modal .setup_viewscreen, #caseNoteDiv .setup_viewscreen {
            width: 130px;
            float: left;
            display: inline-block;
            background-color: #000;
            height: 90px;
            max-width: 100%;
            padding: 0;
            border-radius: 5px;
            position: relative;
            margin-right: 10px;
        }

        .multiple-camera-modal .setup_viewscreen-camera, #caseNoteDiv .setup_viewscreen-camera {
            /* height: 350px; */
            max-width: 100%;
            max-height: 100%;
            width: 100%;
            height: 100%;
            border-radius: 5px;
        }

        .attach-icon-div-gallery {
            position: absolute;
            top: 0;
            right: 0;
            border: none;
            width: 20px;
            text-align: center;
            padding: 0px 0;
            /* background: #ffffff; */
            border-left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            border-radius: 5px;
            line-height: 90px;
            z-index: 9;
            opacity: 0;
            -webkit-transition: all 0.5s linear;
            -moz-transition: all 0.5s linear;
            -o-transition: all 0.5s linear;
            transition: all 0.5s linear;
        }

            .attach-icon-div-gallery .view-file-upload {
                color: #fff;
                background: #42af3c;
                padding: 5px;
                border-radius: 100%;
                width: 25px;
                height: 25px;
                font-size: 13px;
                cursor: pointer;
            }

            .attach-icon-div-gallery .delete-file-upload {
                color: #fff;
                background: #ce635a;
                padding: 5px;
                border-radius: 100%;
                width: 25px;
                height: 25px;
                font-size: 13px;
                margin-left: 5px;
                cursor: pointer;
            }

        .setup_viewscreen:hover .attach-icon-div-gallery {
            opacity: 1;
            -webkit-transition: all 0.5s linear;
            -moz-transition: all 0.5s linear;
            -o-transition: all 0.5s linear;
            transition: all 0.5s linear;
        }



        /*** Multiple documents Upload *****/
        body {
            font-family: arial,sans-serif;
        }

        #lblFileName {
            width: 100%;
            padding-top: 20px;
        }

        .contact-entry-div {
            display: none;
            padding-bottom: 20px;
        }

        .final-btn {
            padding-bottom: 20px;
        }


        .impart-rght {
            text-align: right;
        }

        .scroll-thead {
            display: table;
            width: 100%;
            table-layout: fixed;
            width: 98.3%;
        }

        .scroll-tbody {
            display: block;
            height: 0px;
            overflow: auto;
            overflow-x: hidden;
            width: 100%;
        }

        .checkbox-validation {
            border: 1px solid #a94442;
            padding-bottom: 10px;
            padding-top: 5px;
            border-radius: 10px;
            background-color: pink;
        }

        table#centerTable thead th {
            font-size: 14px !important;
        }

        .check-space {
            margin-top: 0px;
            float: left;
            margin-right: 4px;
        }



        @@media (min-width: 768px) and (max-width: 991px) {
            #lblFileName, .add-useragform input, .add-useragform label, .add-useragform select, .icc_label span, .custom-file-upload {
                width: 100% !important;
            }

            .no-pad-res {
                padding: 0 !important;
            }

            .icc_label span {
                display: block;
            }

            .custom-file-upload {
                margin-left: 0;
            }
        }

        @@media (min-width: 992px) and (max-width: 1199px) {
            #lblFileName {
                width: 100% !important;
            }

            .no-pad-res {
                padding: 0 !important;
            }
        }

        @@media (max-width: 767px) {
            .ic_case_note input, .import_ft_files, .case-note, #lblFileName, .add-useragform input, .add-useragform label, .add-useragform select, .icc_label span, .custom-file-upload {
                width: 100% !important;
            }

            .no-pad-res {
                padding: 0 !important;
            }

            .icc_label span {
                display: block;
            }

            .custom-file-upload {
                margin-left: 0;
            }

            .img-camera {
                margin-left: 8px;
                position: relative;
                top: -5px;
            }

            .address-text {
                line-height: 30px;
            }

            .remove-div-block {
                margin-left: 0 !important;
            }

            .import_ft_files input {
                width: 54% !important;
            }
        }
    </style>
    <link href="~/Content/css/Inkindprocessing.css" rel="stylesheet" />
    <link href="~/Content/css/parentcontact.css" rel="stylesheet" />

}

@section Script{
    <script type="text/javascript">


        var _multiple_multiplevideoSelect = null;
        var _multiple_multiplescreenshotButton = null;
        var _multipleimg = null;
        var _multiplecanvas = null;
        var _multiplebutton = null;
        var _multiplecurrentStream;
        var _multiplevideo;
        var _multipleconstraints = {};
        var front = true;
        $(document).ready(function () {



            // Check for the File API support.
            //if (window.File && window.FileReader && window.FileList && window.Blob) {
            //    document.getElementById('files').addEventListener('change', handleFileSelect, false);
            //} else {
            //    console.log('The File APIs are not fully supported in this browser.');
            //}


            /****** Multiple Camera Uploads ************/



            //camera option for document upload//



            _multiplevideoSelect = document.querySelector('.multiple-camera-modal select#videoSource');
            _multiplevideo = document.querySelector('.multiple-camera-modal #setup-camera-div video');
            _multiplevideo.setAttribute('autoplay', '');
            _multiplevideo.setAttribute('muted', '');
            _multiplevideo.setAttribute('playsinline', '')


            _multiplescreenshotButton = document.querySelector('.multiple-camera-modal #anchor-capture');








            _multiplescreenshotButton.onclick = _multiplevideo.onclick = function () {

                var $index = $('.multiple-camera-modal').find('.div-image-snap-gallery').find('.setup_viewscreen').length;

                var $imageQuery = '<div class="setup_viewscreen col-xs-12 col-sm-12 col-lg-12" style="margin-bottom:10px;" id="image_gallery_' + $index + '">\
                                        <img id="capt-img" class="setup_viewscreen-camera" src="">\
                                        <div class="attach-icon-div-gallery">\
                                            <i class="fa fa-eye view-file-upload" data-toggle="tooltip" tile="view file" aria-hidden="true" data-original-title="" title=""></i>\
                                            <i class="fa fa-trash delete-file-upload"  data-placement="top" aria-hidden="true" title="" data-original-title="Delete Attachment"></i>\
                                        </div>\
                                    </div>';

                _multiplecanvas.width = _multiplevideo.videoWidth;
                _multiplecanvas.height = _multiplevideo.videoHeight;
                _multiplecanvas.getContext('2d').drawImage(_multiplevideo, 0, 0);
                // Other browsers will fall back to image/png
                console.log(_multiplecanvas);
                // img.src = canvas.toDataURL('image/png');

                $('.multiple-camera-modal').find('.div-image-snap-gallery').append($imageQuery);




                $('.multiple-camera-modal').find('.div-image-snap-gallery').find('#image_gallery_' + $index + '').find('img').attr('src', _multiplecanvas.toDataURL('image/png'));
            };




            //new code//




            _multiplevideoSelect.addEventListener('change', function (event) {

                _multiplegetStream();
            });

            navigator.mediaDevices.enumerateDevices().then(_multiplegotDevices);

            _multiplecanvas = document.createElement('canvas');



            setIntervalUserMedia();


            $(document).on('click', '.delete-file-upload', function () {

                $(this).closest('.setup_viewscreen').remove();

            });



            $(document).on('click', '.view-file-upload', function () {

                //  window.open($(this)., 'newwindow','width=500,height=500');

                var imageAttr = $(this).closest('.setup_viewscreen').find('.setup_viewscreen-camera').attr('src');
                //   imageAttr=   imageAttr.replace(/^data:image\/(png|jpg);base64,/, "");
                console.log(imageAttr);

                //imageAttr='<embed src='+imageAttr+'></embed>';
                //window.open(imageAttr, 'newwindow','width=500,height=500');



                var w = window.open('about:blank', 'newwindow', 'width=500,height=500');

                setTimeout(function () { //FireFox seems to require a setTimeout for this to work.
                    w.document.body.appendChild(w.document.createElement('img'))
                        .src = imageAttr;
                }, 0);

            });


            $('.multiple-camera-modal #btn-modal-doc-add').on('click', function () {


                var $imageGallerylength = $('.multiple-camera-modal .div-image-snap-gallery').find('.setup_viewscreen').length;

                if ($imageGallerylength == 0) {
                    customAlert('Please capture image using camera');
                    return false;
                }


                $('#div-edit-modal-img-gallery').append($('.multiple-camera-modal .div-image-snap-gallery').html());

                $('.multiple-camera-modal .div-image-snap-gallery').html('');

                $('.multiple-camera-modal').modal('hide');

            });

            /**************** Multiple Camera Uploads *****************/


            $(document).on("change", ".client-check", function (e) {

                var _ids = [];

                $.each($(".client-check:checked"), function (ind, obj) {
                    //console.log(obj);
                    _ids.push(obj.value);

                });
                $("#clientids").val(_ids.join(','));
            });

            $(document).on("change", ".staff-check", function () {
                var _ids = [];

                $.each($(".staff-check:checked"), function (ind, obj) {
                    _ids.push(obj.value);

                });
                $("#staffIds").val(_ids.join(','));

            });


            $('form').on('keyup keypress', function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });



            if ('@homeFound' == 'True') {
                $('input:radio[name="FamilyHousehold.HomeType"][value=2]').prop('checked', true);
            }


            if ('@TempData["HouseholdMessage"]' != '') {
                customAlert('@TempData["HouseholdMessage"]');

                //setTimeout(function () {
                //    $('#backtofamily').trigger('click');
                //}, 2000);

            }

            CKEDITOR.replace('CaseNoteDetails_Note', {
                language: 'en-gb',
                uiColor: '#295b8f',
                disableNativeSpellChecker: false
            });


            $(document).on("click", "#householdExit", function (e) {
                e.preventDefault();
                $("#backtofamily").trigger("click");
            })

            $('#backtofamily').on('click', function () {



                $('#spinner').show();
                var EHouseholid = $('#enhousehold').val();
                var url = null;
                if ('@homeFound' == 'True') {
                    url = HostedDir + '/Roster/Roster';
                }
                else {
                    url = HostedDir + '/AgencyUser/FamilySummary/' + EHouseholid;
                }
                window.location.href = url;
                //$('#spinner').hide();


            });

            $('#newAddressDiv').find('#City1').on('change', function () {

                bindCaseNoteforNoHome(1);
            });


            $('#caseNoteDetails_CaseNoteDate').mask("99/99/9999", { placeholder: 'MM/DD/YYYY' });

            $('input[name="FamilyHousehold.FamilyHasAddress"]').on('click', function () {

              
                $('#newAddressDiv').find('input[type=text]').val('');
                $('#newAddressDiv').find('select').find('option').remove().end();
                $('#newAddressDiv').find('input[type=file]').val('');


                if ($(this).val() == '1') {
                    $('#newAddressDiv').show('slow');
                    bindCaseNoteforNoHome(1);
                }
                else {
                    
                    $('#newAddressDiv').hide('slow');
                    bindCaseNoteforNoHome(2);
                }

              

            });


            $('#uploadImageCamera').on('click', function () {


                $('.multiple-camera-modal').find('.div-image-snap-gallery').html('');
                $('.multiple-camera-modal').modal('show');
            });

            $('.multiple-camera-modal').on('shown.bs.modal', function (event) {
                $('body').addClass('modal-open');

                showVideoStream();





                //$selfElements.modalEditInkind.modal('hide');
            }).on('hidden.bs.modal', function (event) {

                stopIntervalUserMedia();
                //$selfElements.modalEditInkind.modal('show');
            });

        });



        /************ Multiple Camera Uploads *******************/



        function handleSuccess(stream) {
            _multiplescreenshotButton.disabled = false;
            _multiplevideo.srcObject = stream;
        }

        function _multiplestopMediaTracks(stream) {

            stream.getTracks().forEach(function (track) { track.stop(); })

        }

        function _multiplestopMediaTracks(stream) {
            stream.getTracks().forEach(function (track) {
                track.stop();
            });
        }

        function _multiplegotDevices(mediaDevices) {

            _multiplevideoSelect.innerHTML = '';
            // videoSelect.appendChild(document.createElement('option'));
            var count = 1;
            mediaDevices.forEach(function (mediaDevice) {
                if (mediaDevice.kind === 'videoinput') {
                    const option = document.createElement('option');
                    option.value = mediaDevice.deviceId;
                    const label = mediaDevice.label || 'Camera ' + (count++) + '';
                    const textNode = document.createTextNode(label);
                    option.appendChild(textNode);
                    _multiplevideoSelect.appendChild(option);
                }
            });





        }

        function _multiplegetStream() {
            // alert('change event');
            if (typeof currentStream !== 'undefined') {
                _multiplestopMediaTracks(currentStream);
            }
            const videoConstraints = {};
            if (_multiplevideoSelect.value === '') {
                videoConstraints.facingMode = 'environment';
            } else {
                videoConstraints.deviceId = { exact: _multiplevideoSelect.value };
            }
            const constraints = {
                video: videoConstraints,
                audio: false
            };
            navigator.mediaDevices
              .getUserMedia(constraints)
              .then(function (stream) {
                  currentStream = stream;
                  _multiplevideo.srcObject = stream;
                  return navigator.mediaDevices.enumerateDevices();
              })
              .then(_multiplegotDevices)
              .catch(function (error) {
                  console.error(error);
                  //alert(error);
              });
        }

        function _multipleshowCameraOption(ele) {

            var videoInputAvailable = 0;
            $('#uploadImageCamera').tooltip('hide');
            $('#uploadImageCamera').hide();

            navigator.mediaDevices.enumerateDevices().then(function (devices) {

                console.log(devices);
                devices.forEach(function (device) {


                    if (device.kind == 'videoinput') {
                        videoInputAvailable++;
                    }

                });


                if (videoInputAvailable == 0) {
                    $('#uploadImageCamera').hide();
                    $('#uploadImageCamera').tooltip('hide');

                }
                else {
                    $('#uploadImageCamera').show();
                    $('#uploadImageCamera').tooltip('show');
                }

                console.log(videoInputAvailable);

            }).catch(function (err) {
                console.log(err.name + ": " + err.message);
            });


            //if (videoSelect.options.length > 0) {
            //    _multiplegetStream();
            //}




        }

        function showVideoStream() {
            if (_multiplevideoSelect.options.length > 0) {
                _multiplegetStream();
            }

        }


        function checkUserMedia() {




            navigator.getMedia = (navigator.getUserMedia || // use the proper vendor prefix
                  navigator.webkitGetUserMedia ||
                  navigator.mozGetUserMedia ||
                  navigator.msGetUserMedia);

            navigator.getMedia({ video: true }, function () {

                if (!$('#uploadImageCamera').is(':visible')) {

                    $('#uploadImageCamera').show();
                    $('#uploadImageCamera').tooltip('show');
                }



            }, function () {

                $('#uploadImageCamera').hide();
                $('#uploadImageCamera').tooltip('hide');


            });


        }

        var userMediaInterval = null;

        function setIntervalUserMedia() {

            userMediaInterval = setInterval(function () {

                checkUserMedia();

            }, 1000);



        }

        function stopIntervalUserMedia() {
            clearInterval(userMediaInterval);
        }



        /************** Multiple Camera Uploads *******************/

        //method to convert file to convert to base 64 string/

        function handleFileSelect(evt, $srcId) {
            debugger;
            var f = evt.target.files[0]; // FileList object
            var reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    var binaryData = e.target.result;
                    //Converting Binary Data to base 64
                    var base64String = window.btoa(binaryData);
                    //showing file converted to base64

                    //document.getElementById('base64').value = base64String;
                    //alert('File converted to base64 successfuly!\nCheck in Textarea');

                    base64String = 'data:image/png;base64,' + base64String;
                    $('#' + $srcId).find('.setup_viewscreen-div').find('img').attr('src', base64String);
                };
            })(f);
            // Read in the image file as a data URL.
            reader.readAsBinaryString(f);
        }


        function deleteAttachment(ele) {
            BootstrapDialog.show({
                title: 'Confirmation',
                message: '<p>You are about to delete the Address Verfication form of this household.<br> Click OK to proceed.</p>',
                closable: true, // <-- Default value is false
                closeByBackdrop: false,
                closeByKeyboard: false,
                buttons: [{
                    label: 'Cancel <span class="glossy-button-before"></span><span class="glossy-button-after"></span>',
                    cssClass: 'glossy-button-button glossy-button-hover button-red',
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                },
                {
                    label: 'OK <span class="glossy-button-before"></span><span class="glossy-button-after"></span>',
                    cssClass: 'glossy-button-button glossy-button-hover button-green',
                    action: function (dialogRef) {

                        $.ajax({

                            url: HostedDir + '/AgencyUser/DeleteVerificationDocuments',
                            type: 'post',
                            datatype: 'json',
                            beforeSend: function () { $('#spinner').show() },
                            data: { tabId: 1, householdId: $('#enhousehold').val() },
                            success: function (data) {
                                if (data) {
                                    $(ele).closest('.contact-entry-div').find('.span-upload').html('Add Document');

                                    $(ele).closest('.contact-entry-div').find('#hFileString').val('');

                                    $(ele).closest('.contact-entry-div').find('#hFileName').val('');

                                    $(ele).closest('.contact-entry-div').find('#hFileExtension').val('');


                                    $(ele).closest('.glossy-attachment-icons-block').remove();


                                    dialogRef.close();
                                    customAlertSuccess('Attachment deleted successfully');
                                }
                                else {
                                    customAlert('Error occurred. Please, try again later.');
                                    dialogRef.close();
                                }


                            },
                            error: function (data) {

                            },
                            complete: function (data) {
                                $('#spinner').hide();
                            }



                        });
                    }
                }

                ]
            });

            enhousehold
        }

        //function show the camera popup modal//
        function showCameraPopupmodal(ele) {
            var $modalId = 'updateDocumentModal';
            var $sourceModalId = $(ele).closest('.contact-entry-div').attr('id');

            $('.camera-file-modal').attr('id', $modalId);
            $('#' + $modalId + '').find('#SaveNoteSubmit').html('Add <span class="glossy-button-before"></span><span class="glossy-button-after"></span>');
            $('#' + $modalId + '').find('#SaveNoteSubmit').attr('onclick', 'addDocumentCamera("' + $modalId + '",this,"' + $sourceModalId + '");');
            $('#' + $modalId + '').find('.up-device').attr('onclick', 'uploadFromDeviceDoc("' + $sourceModalId + '","' + $modalId + '");');
            $('#' + $modalId + '').find('#divcapimage').hide();
            $('#' + $modalId + '').find('#capt-img').removeAttr('src');
            $('#' + $modalId + '').find('#divcamnotfound').hide();
            $('#' + $modalId + '').modal('show');
        }

        //function to add document to the popup from camera//
        function addDocumentCamera(modal, ele, sourceObjId) {
            var docImage = $('#' + modal).find('#capt-img');

            if (docImage[0].src.replace('data:,', '') == '') {
                customAlert('Please capture image using camera');
                return false;
            }
            else {


                bindInputFile(docImage, 2, sourceObjId);

                $('#' + modal).modal('hide');
            }

        }

        //function to add the file from the device /pc//
        function uploadFromDeviceDoc(ele, targetId) {

            $('#' + ele).find('#FileaddressAvatar').attr('data-target-id', targetId).trigger('click');
        }

        //Binds the added file to the popup//
        function bindInputFile(ele, imageType, sourceObjId) {

            var $srcModal = $('#' + sourceObjId);

            debugger;
            if (imageType == 1) {

                console.log($(ele).get(0));

                var fileName = $(ele).get(0).files[0].name;


                $srcModal.find('#lblFileName').html(fileName);

                $srcModal.find('#cap-img').parent('div').hide();

                $srcModal.find('#cap-img').attr('src', '');

                $srcModal.find('#hFileString').val('');

                $srcModal.find('#hFileName').val('');

                $srcModal.find('#hFileExtension').val('');
                $srcModal.find('.glossy-attachment-icons-block').remove();

                $srcModal.find('.span-upload').html('Update document');
            }
            else if (imageType == 2) {

                $srcModal.find('#cap-img').attr({ 'src': $(img)[0].src });

                $srcModal.find('#cap-img').show();

                $srcModal.find('.span-upload').html('Update document');

                $srcModal.find('#FamilyHousehold_FileaddressAvatar').val('');

                $srcModal.find('#lblFileName').html('');

                $srcModal.find('.glossy-attachment-icons-block').remove();


                $srcModal.find('#cap-img').show();



                $srcModal.find('#hFileString').val(getBase64Image(img));

                $srcModal.find('#hFileName').val("AddressVerificationForm");

                $srcModal.find('#hFileExtension').val('.png');


                $srcModal.find('#cap-img').parent('div').show();

            }



        }

        //Returns the converted base 64 string image //
        function getBase64Image(img) {
            //debugger;
            //var canvas = document.createElement("canvas");
            //canvas.width = img.width;
            //canvas.height = img.height;
            //var ctx = canvas.getContext("2d");
            //ctx.drawImage(img, 0, 0);
            //var dataURL = ctx.toDataURL("image/png");
            //return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");

            return $(img)[0].src.replace(/^data:image\/(png|jpg);base64,/, "");
        }

        //function to add More Attachments//
        function addMore(ele) {
            var index = $(ele).closest('#section_attachment_div').find('.houseless-attach').length;


            var appendDiv = '<div class="remove-div-block" style="width: 100%;margin-bottom: 10px;float: left;margin-left:16px;" >\
                                            <input name="CaseNoteAttachments[' + index + '].file" accept="image/*" capture="camera" class="form-control houseless-attach"  onchange="ValidateSingleInputpdf2(this,null);" id="CaseNoteAttachments_' + index + '_file"  style="width:56%;display:inline-block;" tabindex="6" type="file" value="">\
                                            <div class="some_attach" style="display:inline-block;padding-left:15px;">\
                                                <a href="javascript:void(0);" style="display:inline-block;" title="Remove Attachment" onclick="removeAttachment(this);"><i class="fa fa-minus-circle" aria-hidden="true"></i>&nbsp;Remove</a>\
                                            </div>\
                                        </div>';

            $(ele).closest('#section_attachment_div').find('.import_ft_files').append(appendDiv);

        }

        //function to remove additional Attachments//
        function removeAttachment(ele) {
            $(ele).parent('.some_attach').parent('div').remove();
        }

        //function to Check ZipCode Availability//
        function checkZipCode(inputTextObject) {
            if ($(inputTextObject).val() != "") {
                var ret = true;
                var Zipcode = $(inputTextObject).val();
                var len = Zipcode.length;
                if ((isNaN(inputTextObject.value)) && (len < 2)) {
                    $(inputTextObject).val('');
                    customAlert("Zip code must be numeric. ");
                    var ret = false;
                }
                else if (len < 2) {
                    $(inputTextObject).val('');
                    customAlert("Zip code length must be 2 digit. ");
                    var ret = false;
                }
                else if (isNaN(inputTextObject.value)) {
                    $(inputTextObject).val('');
                    customAlert("Zip code must be numeric. ");
                    var ret = false;
                }
                if (ret)
                    CheckAddress(1);
                return ret;
            }
            else {
                $('#City').find('option').remove();
                $('#State').val('');
                $('#County').val('');


            }
        }


        function checkZipCodeNew(inputTextObject) {
            if ($(inputTextObject).val() != "") {
                var ret = true;
                var Zipcode = $(inputTextObject).val();
                var len = Zipcode.length;
                if ((isNaN(inputTextObject.value)) && (len < 2)) {
                    $(inputTextObject).val('');
                    customAlert("Zip code must be numeric. ");
                    var ret = false;
                }
                else if (len < 2) {
                    $(inputTextObject).val('');
                    customAlert("Zip code length must be 2 digit. ");
                    var ret = false;
                }
                else if (isNaN(inputTextObject.value)) {
                    $(inputTextObject).val('');
                    customAlert("Zip code must be numeric. ");
                    var ret = false;
                }
                if (ret)
                    CheckAddressNew(1);
                return ret;
            }
            else {
                $('#City1').find('option').remove();
                $('#State1').val('');
                $('#County1').val('');


            }
        }

        function CheckdateHouseless(value) {



            isValid = true;
            if (!$(value).attr("readonly")) {

                if ($(value).val().trim() != "MM/DD/YYYY" && $(value).val().trim() != "") {
                    var dateformat = /^(0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])[\/\-]\d{4}$/;
                    var regex = new RegExp(dateformat);
                    if (!regex.test($(value).val())) {
                        customAlert("Invalid date format. ");
                        $(value).val('');
                        return false;
                    }
                    else {
                        var text = $(value).val();
                        var comp = text.split('/');
                        var m = parseInt(comp[0], 10);
                        var d = parseInt(comp[1], 10);
                        var y = parseInt(comp[2], 10);
                        var date = new Date(y, m - 1, d);
                        if (date.getFullYear() == y && date.getMonth() + 1 == m && date.getDate() == d) {

                        } else {
                            customAlert("Invalid date. ");
                            $(value).val('');
                            return false;
                        }



                    }
                }
                var txtdate = $(value).val();
                var selectedTimestampequal = new Date();
                var year = selectedTimestampequal.getFullYear();
                var month = selectedTimestampequal.getMonth() + 1;
                var day = selectedTimestampequal.getDate();
                today1 = month + '/' + day + '/' + year;
                var newinput = today1.split("/");
                var newday = newinput[1];
                var str = newday.substr(0, 1);
                var newdaynew = ('0' + newday).slice(-2);
                var newmonth = newinput[0];
                var str1 = newmonth.substr(0, 1);
                var newmonthnew = ('0' + newmonth).slice(-2);
                today = newmonthnew + '/' + newdaynew + '/' + year;
                if (today == txtdate) {
                    return true;
                }
                var testdatelocalinput = new Date(txtdate);
                var selectedTimestamp = new Date().getTime();
                var testdatelocalinputTS = testdatelocalinput.getTime();
                var timestamp = new Date().getTime() - (30 * 24 * 60 * 60 * 1000)
                if (testdatelocalinputTS > selectedTimestamp) {
                    customAlert("Case Note date must be less than or equal to today's date.");
                    $(value).val('');
                    return false;
                }
                else if (timestamp > testdatelocalinputTS) {
                    customAlert("Case Note date cannot be less than 30 days from today's date.");
                    $(value).val('');
                    return false;
                }
            }
            return true;
        }

        //function to checkAddress//
        function CheckAddress(value) {
            var Zipcode = 0;
            if (value == 0)
                Zipcode = 0;
            else
                Zipcode = $('#ZipCode').val();

            if (value == 0 && $('#State').val().trim() != "") {
                $.ajax({
                    url: HostedDir + "/Agencyuser/Checkaddress",
                    type: "POST",
                    data: {
                        Address: $('#Street').val() + $('#StreetName').val() + $('#ZipCode').val(),
                        HouseHoldId: $('#HouseholdId').val(),
                        Zipcode: Zipcode
                    },
                    dataType: "json",
                    secureuri: false,
                    async: false,
                    success: function (response) {
                        if (response.Result == 1) {
                            BootstrapDialog.confirm('Address already exists. Do you want to continue?', function (result) {
                                if (!result) {
                                    //code643
                                   /* $('#Street').val("");
                                    $('#StreetName').val("");
                                    $('#ZipCode').val("");
                                    $('#City').find('option').remove().end();
                                    $('#City').val('');
                                    $('#State').val('');
                                    $('#County').val('');
                                    bindCaseNoteForAddressChange();*/
                                }
                                if (result) {
                                    bindCaseNoteForAddressChange();
                                }
                            });
                        }
                        else {
                            bindCaseNoteForAddressChange();
                        }
                    }
                        , error: function (response) {
                            customAlert("Session Ended Log Onto The System Again."); setTimeout(function () { window.location.href = HostedDir + '/login/Loginagency'; }, 2000);
                        }
                });


            }
            else {
                if ($('#ZipCode').val().trim() != "") {

                    $.ajax({
                        url: HostedDir + "/Agencyuser/Checkaddress",
                        type: "POST",
                        data: {
                            Address: $('#Street').val() + $('#StreetName').val() + $('#ZipCode').val(),
                            HouseHoldId: $('#HouseholdId').val(),
                            Zipcode: Zipcode
                        },
                        dataType: "json",
                        secureuri: false,
                        async: false,
                        success: function (response) {
                            if (value == 1) {
                                if (response.Zipcodelist != null && response.Zipcodelist.length > 0) {
                                    var option = "";
                                    for (var i = 0; i < response.Zipcodelist.length; i++) {
                                        option = option + '<option value="' + response.Zipcodelist[i].City + '">' + response.Zipcodelist[i].City + '</option>';
                                    }
                                    $('#City').find('option').remove().end().append(option);
                                    $('#City').val('');
                                    $('#State').val(response.Zipcodelist[0].State);
                                    $('#County').val(response.Zipcodelist[0].County);
                                    $('#ZipCode').val(response.Zipcodelist[0].Zipcode);
                                    bindCaseNoteForAddressChange();
                                }
                                else {
                                    $('#City').find('option').remove().end();
                                    $('#City').val('');
                                    $('#State').val('');
                                    $('#ZipCode').val('');
                                    $('#County').val('');
                                    bindCaseNoteForAddressChange();
                                    customAlert("Could not find zipcode details.");

                                }
                            }
                            if (response.Result == 1) {
                                BootstrapDialog.confirm('Address already exists. Do you want to continue?', function (result) {
                                    if (!result) {
                                        $('#Street').val("");
                                        $('#StreetName').val("");
                                        $('#ZipCode').val("");
                                        $('#City').find('option').remove().end();
                                        $('#City').val('');
                                        $('#State').val('');
                                        $('#County').val('');
                                        bindCaseNoteForAddressChange();
                                    }
                                });
                            }
                            if (result) {
                                bindCaseNoteForAddressChange();

                            }
                        }
                            , error: function (response) {
                                customAlert("Session Ended Log Onto The System Again."); setTimeout(function () { window.location.href = HostedDir + '/login/Loginagency'; }, 2000);
                            }
                    });
                }


            }


        }


        function CheckAddressNew(value) {
            var Zipcode = 0;
            if (value == 0)
                Zipcode = 0;
            else
                Zipcode = $('#ZipCode1').val();

            if (value == 0 && $('#State1').val().trim() != "") {
                $.ajax({
                    url: HostedDir + "/Agencyuser/Checkaddress",
                    type: "POST",
                    data: {
                        Address: $('#Street1').val() + $('#StreetName1').val() + $('#ZipCode1').val(),
                        HouseHoldId: $('#HouseholdId').val(),
                        Zipcode: Zipcode
                    },
                    dataType: "json",
                    secureuri: false,
                    async: false,
                    success: function (response) {
                        if (response.Result == 1) {
                            BootstrapDialog.confirm('Address already exists. Do you want to continue?', function (result) {
                                if (!result) {
                                    $('#Street1').val("");
                                    $('#StreetName1').val("");
                                    $('#ZipCode1').val("");
                                    $('#City1').find('option').remove().end();
                                    $('#City1').val('');
                                    $('#State1').val('');
                                    $('#County1').val('');
                                    bindCaseNoteforNoHome(1);
                                }
                                if (result) {
                                    bindCaseNoteforNoHome(1);
                                }
                            });
                        }
                        else {
                            bindCaseNoteforNoHome(1);
                        }
                    }
                        , error: function (response) {
                            customAlert("Session Ended Log Onto The System Again."); setTimeout(function () { window.location.href = HostedDir + '/login/Loginagency'; }, 2000);
                        }
                });


            }
            else {
                if ($('#ZipCode1').val().trim() != "") {

                    $.ajax({
                        url: HostedDir + "/Agencyuser/Checkaddress",
                        type: "POST",
                        data: {
                            Address: $('#Street1').val() + $('#StreetName1').val() + $('#ZipCode1').val(),
                            HouseHoldId: $('#HouseholdId').val(),
                            Zipcode: Zipcode
                        },
                        dataType: "json",
                        secureuri: false,
                        async: false,
                        success: function (response) {
                            if (value == 1) {
                                if (response.Zipcodelist != null && response.Zipcodelist.length > 0) {
                                    var option = "";
                                    for (var i = 0; i < response.Zipcodelist.length; i++) {
                                        option = option + '<option value="' + response.Zipcodelist[i].City + '">' + response.Zipcodelist[i].City + '</option>';
                                    }
                                    $('#City1').find('option').remove().end().append(option);
                                    $('#City1').val('');
                                    $('#State1').val(response.Zipcodelist[0].State);
                                    $('#County1').val(response.Zipcodelist[0].County);
                                    $('#ZipCode1').val(response.Zipcodelist[0].Zipcode);
                                    bindCaseNoteforNoHome(1);
                                }
                                else {
                                    $('#City1').find('option').remove().end();
                                    $('#City1').val('');
                                    $('#State1').val('');
                                    $('#ZipCode1').val('');
                                    $('#County1').val('');
                                    bindCaseNoteforNoHome(1);
                                    customAlert("Could not find zipcode details.");

                                }
                            }
                            if (response.Result == 1) {
                                BootstrapDialog.confirm('Address already exists. Do you want to continue?', function (result) {
                                    if (!result) {
                                        $('#Street1').val("");
                                        $('#StreetName1').val("");
                                        $('#ZipCode1').val("");
                                        $('#City1').find('option').remove().end();
                                        $('#City1').val('');
                                        $('#State1').val('');
                                        $('#County1').val('');
                                        bindCaseNoteforNoHome(1);
                                    }
                                });
                            }
                            if (result) {
                                bindCaseNoteforNoHome(1);

                            }
                        }
                            , error: function (response) {
                                customAlert("Session Ended Log Onto The System Again."); setTimeout(function () { window.location.href = HostedDir + '/login/Loginagency'; }, 2000);
                            }
                    });
                }


            }


        }




        function bindCaseNoteforNoHome(mode) {
            
            var old_familyhomeless = $('#old_familyhomeless').val().trim();
            var old_address = $('#old_address').val().trim();
            var old_apartment = $('#old_apartment').val().trim();
            var old_zipcode = $('#old_zipcode').val().trim();
            var old_city = $('#old_city').val().trim();
            var old_state = $('#old_state').val().trim();
            var old_county = $('#old_county').val().trim();
            var old_homeType = $('#old_familyhomeless').val().trim();

            var current_address = ($('#Street1').val() == undefined || $('#Street1').val() == null) ? "" : $('#Street1').val().trim();
            var current_apartment = ($('#StreetName1').val() == undefined || $('#StreetName1').val() == null) ? "" : $('#StreetName1').val().trim();
            var current_zipcode = ($('#ZipCode1').val() == undefined || $('#ZipCode1').val() == null) ? "" : $('#ZipCode1').val().trim();
            var current_city = ($('#City1').val() == undefined || $('#City1').val() == null) ? "" : $('#City1').val().trim();
            var current_state = ($('#State1').val() == undefined || $('#State1').val() == null) ? "" : $('#State1').val().trim();
            var current_county = ($('#County1').val() == undefined || $('#County1').val() == null) ? "" : $('#County1').val().trim();
            var current_familyhomeless = $('input:radio[name="FamilyHousehold.HomeType"]:checked').val();

            if (old_familyhomeless == '2') {
                var noteSection = '';

                var caseNoteDiv = $('#caseNoteDiv');

                noteSection += (old_homeType == '1' && current_familyhomeless == '2') ? '<h2>Contact Address</h2>' : '<h2>Old Address</h2>';

                noteSection += old_address + '<br>';
                noteSection += old_apartment == '' ? '' : old_apartment + '</br>';
                noteSection += old_city + '<br>';
                noteSection += old_county + '<br>';
                noteSection += old_state + '-' + old_zipcode + '<br>';

                if (mode == 1)  //having new address for family houseless
                {
                    noteSection += current_familyhomeless == '1' ? '<h2>Contact Address</h2>' : '<h2>New Address</h2>';
                    noteSection += current_address + '<br>';
                    noteSection += current_apartment == '' ? '' : current_apartment + '</br>';
                    noteSection += current_city + '<br>';
                    noteSection += current_county + '<br>';
                    noteSection += current_state + '-' + current_zipcode + '<br>';
                }
                else //no-address for family houseless
                {
                    noteSection += '<h2>Contact Address - <span>Homeless</span></h2>';
                }

             

                caseNoteDiv.find('#CaseNoteDetails_CaseNoteDate').val(getFormattedDate(new Date()));

                caseNoteDiv.find('#CaseNoteDetails_CaseNotetitle').val("Family Homeless");
                caseNoteDiv.find('#CaseNoteDetails_Note').val(noteSection);


                if (CKEDITOR.instances['CaseNoteDetails_Note']) {
                    CKEDITOR.instances['CaseNoteDetails_Note'].destroy(true);

                }

                CKEDITOR.replace('CaseNoteDetails_Note', {
                    language: 'en-gb',
                    uiColor: '#295b8f',
                    disableNativeSpellChecker: false
                });


                $('#CaseNoteDetails_CaseNotetags').tagsInput({
                    width: 'auto',
                    height: 'auto',
                    delimiter: [',', ';'],
                    autocomplete: {
                        //'source': tags_array[0].split(/,\s*/)
                        'source': getTagsOnInput()
                    },
                    autocomplete_url: '',
                });

                if (current_familyhomeless == '1' && $('input:radio[name="FamilyHousehold.FamilyHasAddress"]:checked').val() == '1') {
                    $('#CaseNoteDetails_CaseNotetags').importTags(',,;Family Homeless,,;Contact Address');

                }
                else {
                    $('#CaseNoteDetails_CaseNotetags').importTags(',,;Family Homeless');

                }

                caseNoteDiv.show('slow');
            }

            else {


                var noteSection = '';

                var caseNoteDiv = $('#caseNoteDiv');


                if (old_zipcode != null && old_zipcode != "") {
                    noteSection += '<h2>Contact Address</h2>';
                    noteSection += old_address + '<br>';
                    noteSection += old_apartment == '' ? '' : old_apartment + '</br>';
                    noteSection += old_city + '<br>';
                    noteSection += old_county + '<br>';
                    noteSection += old_state + '-' + old_zipcode + '<br>';
                }
                else {
                    noteSection += '<h2>Contact Address</h2> <span> Homeless</span>';
                }





                if (mode == 1)  //having new address for family houseless
                {
                    if (current_familyhomeless == '1') {
                        noteSection += '<h2>Contact Address</h2>';

                        $('#newAddressDiv').find('#contact-legend').html('Contact Address');
                    }
                    else {
                        noteSection += '<h2>New Address</h2>';
                        $('#newAddressDiv').find('#contact-legend').html('New Address');

                    }
                    noteSection += current_address + '<br>';
                    noteSection += current_apartment == '' ? '' : current_apartment + '</br>';
                    noteSection += current_city + '<br>';
                    noteSection += current_county + '<br>';
                    noteSection += current_state + '-' + current_zipcode + '<br>';
                }
                else //no-address for family houseless
                {
                    noteSection += '<h2>New Address</h2><span>Homeless</span>';
                }



                caseNoteDiv.find('#CaseNoteDetails_CaseNoteDate').val(getFormattedDate(new Date()));

                if (current_familyhomeless == '1') {
                    caseNoteDiv.find('#CaseNoteDetails_CaseNotetitle').val("Contact Address Updated");
                }
                else {
                    caseNoteDiv.find('#CaseNoteDetails_CaseNotetitle').val("Home Found");

                }

                caseNoteDiv.find('#CaseNoteDetails_Note').val(noteSection);


                if (CKEDITOR.instances['CaseNoteDetails_Note']) {
                    CKEDITOR.instances['CaseNoteDetails_Note'].destroy(true);

                }

                CKEDITOR.replace('CaseNoteDetails_Note', {
                    language: 'en-gb',
                    uiColor: '#295b8f',
                    disableNativeSpellChecker: false
                });


                $('#CaseNoteDetails_CaseNotetags').tagsInput({
                    width: 'auto',
                    height: 'auto',
                    delimiter: [',', ';'],
                    autocomplete: {
                        //'source': tags_array[0].split(/,\s*/)
                        'source': getTagsOnInput()
                    },
                    autocomplete_url: '',
                });

                if (current_familyhomeless == '1') {
                    $('#CaseNoteDetails_CaseNotetags').importTags(',,;Contact Address');

                }
                else {
                    $('#CaseNoteDetails_CaseNotetags').importTags(',,;Home Found,,;Address Change');

                }


                caseNoteDiv.show('slow');
            }





        }

        function bindCaseNoteForAddressChange() {

            // debugger;
            var old_address = $('#old_address').val().trim();
            var old_apartment = $('#old_apartment').val().trim();
            var old_zipcode = $('#old_zipcode').val().trim();
            var old_city = $('#old_city').val().trim();
            var old_state = $('#old_state').val().trim();
            var old_county = $('#old_county').val().trim();
            var old_homeType = $('#old_familyhomeless').val().trim();


            var current_address = ($('#Street').val() == undefined || $('#Street').val() == null) ? "" : $('#Street').val().trim();
            var current_apartment = ($('#StreetName').val() == undefined || $('#StreetName').val() == null) ? "" : $('#StreetName').val().trim();
            var current_zipcode = ($('#ZipCode').val() == undefined || $('#ZipCode').val() == null) ? "" : $('#ZipCode').val().trim();
            var current_city = ($('#City').val() == undefined || $('#City').val() == null) ? "" : $('#City').val().trim();
            var current_state = ($('#State').val() == undefined || $('#State').val() == null) ? "" : $('#State').val().trim();
            var current_county = ($('#County').val() == undefined || $('#County').val() == null) ? "" : $('#County').val().trim();
            var current_county = ($('#County').val() == undefined || $('#County').val() == null) ? "" : $('#County').val().trim();
            var current_homeType = $('input:radio[name="FamilyHousehold.HomeType"]:checked').val();

            var caseNoteDiv = $('#caseNoteDiv');
            var addresChange = 0;

            if (current_address != '' && current_zipcode != '' && current_city != '' && current_state != '' && current_county != '') {

                if (current_address != old_address) {
                    addresChange++;
                }

                if (current_apartment != old_apartment) {
                    addresChange++;
                }

                if (current_zipcode != old_zipcode) {
                    addresChange++;
                }
                if (current_city != old_city) {
                    addresChange++;
                }

                if (current_state != old_state) {
                    addresChange++;
                }

                if (current_county != old_county) {
                    addresChange++;
                }
            }

            if (addresChange > 0) {
                var noteSection = '';



                noteSection += (old_homeType == '1' && current_homeType == '2') ? '<h2>Contact Address</h2>' : '<h2>Old Address</h2>';

                noteSection += old_address + '<br>';
                noteSection += old_apartment == '' ? '' : old_apartment + '</br>';
                noteSection += old_city + '<br>';
                noteSection += old_county + '<br>';
                noteSection += old_state + '-' + old_zipcode + '<br>';

                noteSection += '<h2>New Address</h2>';

                noteSection += current_address + '<br>';
                noteSection += current_apartment == '' ? '' : current_apartment + '</br>';
                noteSection += current_city + '<br>';
                noteSection += current_county + '<br>';
                noteSection += current_state + '-' + current_zipcode + '<br>';

                caseNoteDiv.find('#CaseNoteDetails_CaseNoteDate').val(getFormattedDate(new Date()));

                caseNoteDiv.find('#CaseNoteDetails_CaseNotetitle').val("Address Change");
                caseNoteDiv.find('#CaseNoteDetails_Note').val(noteSection);


                if (CKEDITOR.instances['CaseNoteDetails_Note']) {
                    CKEDITOR.instances['CaseNoteDetails_Note'].destroy(true);

                }

                CKEDITOR.replace('CaseNoteDetails_Note', {
                    language: 'en-gb',
                    uiColor: '#295b8f',
                    disableNativeSpellChecker: false
                });


                $('#CaseNoteDetails_CaseNotetags').tagsInput({
                    width: 'auto',
                    height: 'auto',
                    delimiter: [',', ';'],
                    autocomplete: {
                        //'source': tags_array[0].split(/,\s*/)
                        'source': getTagsOnInput()
                    },
                    autocomplete_url: '',
                });

                $('#CaseNoteDetails_CaseNotetags').importTags(',,;Address Change');

                caseNoteDiv.show('slow');

            }

            else {
                caseNoteDiv.hide('slow');
            }





        }


        function getTagsOnInput() {
            var tagInp = $('#CaseNoteDetails_CaseNotetags').val();
            var tagsArr = [];
            $.ajax({

                url: '/Roster/GetCaseNoteTagonInput',
                datatype: 'json',
                type: 'post',
                async: true,
                data: { searchText: tagInp },
                success: function (data) {
                    if (data != null) {
                        if (data.length > 0) {
                            $.each(data, function (i, tags) {
                                tagsArr.push(tags.Text);
                            });
                        }
                    }
                },
                error: function (data) {

                }

            });

            return tagsArr;
        }

        function getFormattedDate(date) {
            date = new Date(date);
            var year = date.getFullYear();

            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;

            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;

            return month + '/' + day + '/' + year;
        }


        function bindCaseNoteArea(mode) {
            debugger;
            var houselessModal = $('#Houselessmodal');
            var oldAddress = houselessModal.find('#oldAddress').val();
            var newAddress = '';
            var street = houselessModal.find('#FamilyHousehold_Street').val() == null ? '' : $('#FamilyHousehold_Street').val();
            var appartment = houselessModal.find('#FamilyHousehold_StreetName').val() == null ? '' : houselessModal.find('#FamilyHousehold_StreetName').val();
            var city = houselessModal.find('#FamilyHousehold_City').val() == null ? '' : houselessModal.find('#FamilyHousehold_City').val();
            var county = houselessModal.find('#FamilyHousehold_County').val() == null ? '' : houselessModal.find('#FamilyHousehold_County').val();
            var state = houselessModal.find('#FamilyHousehold_State').val() == null ? '' : houselessModal.find('#FamilyHousehold_State').val();
            var zipcode = houselessModal.find('#FamilyHousehold_ZipCode').val() == null ? '' : houselessModal.find('#FamilyHousehold_ZipCode').val();

            //  CKEDITOR.instances['CaseNoteDetails_Note'].setData('');

            if (mode == 1) {
                newAddress += oldAddress + '<h2>New Address</h2>';

                newAddress += street + '<br>';
                newAddress += appartment == '' ? '' : appartment + '</br>';
                newAddress += city + '<br>';
                newAddress += county + '<br>';
                newAddress += state + '-' + zipcode;
                CKEDITOR.instances['CaseNoteDetails_Note'].setData(newAddress);
            }
            else {
                CKEDITOR.instances['CaseNoteDetails_Note'].setData(oldAddress);
            }

        }

        function ShowHideDivParentTwo1() {
            $('#divParentrelatioship').hide();
            $('#divrelationshipparent').hide();
            $('#married').hide();
        }

        function ShowHideDivParentTwo2() {
            $('#ParentRelatioship').find('option').remove().end().append('<option value="1">Parents (biological, adoptive, stepparents, etc.)</option>' +
                '<option value="2">Grandparents</option><option value="3">Relatives other than grandparents</option><option value="4">Foster parents not including relatives</option>' +
               '<option value="6">Other</option> ');
            $('#ParentRelatioship').val('');
            $('#divParentrelatioship').hide();
            $('#divrelationshipparent').show();
            $('#married').show();

        }

        function Checkhouse(object) {
            
            var isShowDiv = false;


            if ($('input:radio[name="FamilyHousehold.RentType"]').is(':checked')) {
                BootstrapDialog.confirm('Rent type is not applicable with Homeless family. Do you want to continue?', function (result) {
                    if (result) {
                        isShowDiv = true;
                        $('input:radio[name="FamilyHousehold.RentType"]').prop({ 'checked': false });
                        $('input:radio[name="FamilyHousehold.RentType"]').prop('disabled', true);

                        $('#curr_house_div').hide('slow');
                        $('#makedFamilyHomeless').show('slow');
                        $('input[name="FamilyHousehold.FamilyHasAddress"]').prop('checked', false);


                        $('#newAddressDiv').hide();
                        $('#newAddressDiv').find('input').val('');
                        $('#newAddressDiv').find('select').html('');
                    }
                    else {
                        $(object).prop('checked', false);
                        $('#HomeType2').trigger('click');
                    }

                });
            }
            else {

                $('input:radio[name="FamilyHousehold.RentType"]').prop({ 'checked': false });
                $('input:radio[name="FamilyHousehold.RentType"]').prop('disabled', true);

                $('#curr_house_div').hide('slow');
                $('#makedFamilyHomeless').show('slow');
                $('input[name="FamilyHousehold.FamilyHasAddress"]').prop('checked', false);


                $('#newAddressDiv').hide();
                $('#newAddressDiv').find('input').val('');
                $('#newAddressDiv').find('select').html('');

            }








        }












        //function UnCheckhouse(object) {
        //    $('#curr_house_div').show('slow');
        //    if ($('#old_familyhomeless').val() == '1')
        //    {
        //        $('#makedFamilyHomeless').hide('slow');
        //        $('input[name="FamilyHousehold.FamilyHasAddress"][value=1]').trigger('click');
        //        // $('#newAddressDiv').show('slow');
              
        //    }

        //    else
        //    {
        //        $('input[name=hasNewAddress]').prop('checked', false);
        //        $('#makedFamilyHomeless').hide('slow');
        //        $('#newAddressDiv').hide('slow');
        //    }
          
        //}


        function UnCheckhouse(object) {




            $('input[name=hasNewAddress]').prop('checked', false);
            $('#makedFamilyHomeless').hide('slow');


            // Existing is having home//
            if ($('#old_familyhomeless').val() == '2') {
                $('#curr_house_div').show('slow');

                $('input:radio[name="FamilyHousehold.RentType"][value="' + $('#old_rentType').val() + '"]').prop('checked', true);
                $('input:radio[name="FamilyHousehold.RentType"]').prop('disabled', false);
                $('#makedFamilyHomeless').hide('slow');
                $('#newAddressDiv').hide('slow');
                $('#caseNoteDiv').hide('slow');
            }
            else {
                $('#curr_house_div').hide('slow');
                $('#makedFamilyHomeless').hide('slow');
                $('input[name="FamilyHousehold.FamilyHasAddress"]').prop('checked', false);

                $('#newAddressDiv').find('#contact-legend').html('New Address');

                $('#newAddressDiv').show('slow');

            }

        }


        function Renting(object) {
            if ($('#HomeType1').prop("checked")) {
                BootstrapDialog.confirm('Rent type is not applicable with Homeless family. Do you want to continue?', function (result) {
                    if (!result) {
                        $(object).prop("checked", false);
                    }
                });
            }
        }
        function Buying(object) {
            if ($('#HomeType1').prop("checked")) {
                BootstrapDialog.confirm('Rent type is not applicable with Homeless family. Do you want to continue?', function (result) {
                    if (!result) {
                        $(object).prop("checked", false);
                    }
                });
            }
        }
        function SubsidizedRent(object) {
            if ($('#HomeType1').prop("checked")) {
                BootstrapDialog.confirm('Rent type is not applicable with Homeless family. Do you want to continue?', function (result) {
                    if (!result) {
                        $(object).prop("checked", false);
                    }
                });
            }
        }
        function NoPayment(object) {
            if ($('#HomeType1').prop("checked")) {
                BootstrapDialog.confirm('Rent type is not applicable with Homeless family. Do you want to continue?', function (result) {
                    if (!result) {
                        $(object).prop("checked", false);
                    }
                });
            }
        }

        function uncheckdataNone() {
            if (($('#TANF').prop("checked")) || ($('#SSI').prop("checked")) || ($('#WIC').prop("checked")) || ($('#SNAP').prop("checked"))) {
                $('#None').prop("checked", false);
            }
        }

        function uncheckdata() {
            if ($('#None').prop("checked")) {
                $('#TANF').prop("checked", false);
                $('#SSI').prop("checked", false);
                $('#WIC').prop("checked", false);
                $('#SNAP').prop("checked", false);
            }
        }

        function Showotherlanguage() {
            $('#OtherLanguageDetail').val("");
            if ($('#PrimaryLanguauge').val() == 12)
                $('#div2').show('slow');
            else
                $('#div2').hide('slow');
        }

        function ShowdivParentotherrelationship() {
            $('#ParentRelatioshipOther').val('');
            if ($('#ParentRelatioship').val() == 6)
                $('#divParentrelatioship').show();

            else
                $('#divParentrelatioship').hide();
        }


        function SaveHouseholdDetails() {



            debugger;
            var isValid = true;
            cleanValidation();
            var ishaveHome=false;
            

            var Tags = '';
            $('#caseNoteDiv').find('#CaseNoteDetails_CaseNotetags_tagsinput .tag span').each(function () {
                Tags = Tags + $(this).text().trim() + ',';
            });
            $('#caseNoteDiv').find("#CaseNoteDetails_CaseNotetags").val(Tags);

            $('#HasCaseNoteDetails').val('False');
            $('#HasNewAddress').val('False');

            //if ($('#HomeType2').prop("checked") || (!$('#HomeType1').prop("checked") && !$('#HomeType2').prop("checked"))) {
            //    ishaveHome = true;
            //}
            var isCurrentHomeVisible = false;

            isCurrentHomeVisible = ($('#curr_house_div').is(':visible'));


            if ($('#Street')[0].value.trim() == "" && isCurrentHomeVisible) {
                isValid = false;
                customAlert("Address is required. ");
                plainValidation('#Street');
                return isValid;
            }
            if ($('#ZipCode')[0].value.trim() == "" && isCurrentHomeVisible) {
                isValid = false;
                customAlert("Zip Code is required. ");
                plainValidation('#ZipCode');
                return isValid;
            }
            if (($('#City').val() == "" || $('#City').val() == null) && isCurrentHomeVisible) {
                isValid = false;
                customAlert("City is required. ");
                plainValidation('#City');
                return isValid;
            }
            if ($('#State')[0].value.trim() == "" && isCurrentHomeVisible) {
                isValid = false;
                customAlert("State is required. ");
                plainValidation('#State');
                return isValid;
            }
            if ($('#County')[0].value.trim() == "" && isCurrentHomeVisible) {
                isValid = false;
                customAlert("County is required. ");
                plainValidation('#County');
                return isValid;
            }
            if (!$('#HomeType1').prop("checked") && !$('#HomeType2').prop("checked")) {
                isValid = false;
                customAlert("Is family Homeless at this time is required. ");
                return isValid;
            }

            if (!$('#chk input[type="checkbox"]').is(':checked')) {
                isValid = false;
                customAlert("Federal or other assistance is required. ");
                return isValid;
            }
            if ($('#PrimaryLanguauge').val() == "" || $('#PrimaryLanguauge').val() == null) {
                isValid = false;
                customAlert("Primary language is required. ");
                plainValidation('#PrimaryLanguauge');
                return isValid;
            }
            else if ($('#PrimaryLanguauge').val() == "12" && $('#OtherLanguageDetail').val() == "") {
                isValid = false;
                customAlert("Other language detail is required. ");
                plainValidation('#OtherLanguageDetail');
                return isValid;
            }
            if (!$('#Interpretor').prop("checked") && !$('#Interpretor1').prop("checked")) {
                isValid = false;
                customAlert("Does family need an interpreter is required. ");
                return isValid;
            }

            if ($('#HomeType1').prop("checked") && $('#makedFamilyHomeless').is(':visible') && !$('input[name="FamilyHousehold.FamilyHasAddress"]').is(':checked')) {
                isValid = false;
                customAlert("Does family has any address is required. ");
                return isValid;
            }

            if (


                ($('#HomeType1').prop("checked") && $('#makedFamilyHomeless').is(':visible') && $('input[name="FamilyHousehold.FamilyHasAddress"]:checked').val() == '1')
                || ($('#HomeType2').prop("checked") && $('#old_familyhomeless').val() == '1')) {


                if ($('#Street1')[0].value.trim() == "" && !ishaveHome) {
                    isValid = false;
                    customAlert("Address is required. ");
                    plainValidation('#Street1');
                    return isValid;
                }
                if ($('#ZipCode1')[0].value.trim() == "" && !ishaveHome) {
                    isValid = false;
                    customAlert("Zip Code is required. ");
                    plainValidation('#ZipCode1');
                    return isValid;
                }
                if (($('#City1').val() == "" || $('#City1').val() == null) && !ishaveHome) {
                    isValid = false;
                    customAlert("City is required. ");
                    plainValidation('#City1');
                    return isValid;
                }
                if ($('#State1')[0].value.trim() == "" && !ishaveHome) {
                    isValid = false;
                    customAlert("State is required. ");
                    plainValidation('#State1');
                    return isValid;
                }
                if ($('#County1')[0].value.trim() == "" && !ishaveHome) {
                    isValid = false;
                    customAlert("County is required. ");
                    plainValidation('#County1');
                    return isValid;
                }

             
                $('#HasNewAddress').val('True');

            }

            if ($('#HomeType1').prop("checked") && $('#makedFamilyHomeless').is(':visible')) {

                $('#HasNewAddress').val('True');
            }


            if ($('#caseNoteDiv').is(':visible')) {


                var caseNoteDiv = $('#caseNoteDiv');
                if (caseNoteDiv.find('#CaseNoteDetails_caseNoteDate').val() == '') {
                    plainValidation('#CaseNoteDetails_caseNoteDate');
                    customAlert("Please enter Case Note Date");
                    return false;
                }
                else {
                    if (!CheckdateHouseless(caseNoteDiv.find('#CaseNoteDetails_CaseNoteDate'))) {
                        plainValidation('#CaseNoteDetails_caseNoteDate');
                        // customAlert("Please enter valid date");
                        return false;
                    }
                }

                if (caseNoteDiv.find('#CaseNoteDetails_CaseNotetitle').val() == '') {
                    plainValidation('#CaseNoteDetails_CaseNotetitle');
                    customAlert("Please enter Case Note Title");
                    return false;
                }
                if (CKEDITOR.instances['CaseNoteDetails_Note'].getData() == "") {
                    caseNoteDiv.find("#CaseNoteDetails_Note").focus();
                    customAlert("Please enter Case Note");
                    return false;
                }
                if (!caseNoteDiv.find("#ClientDiv").find('.client-check').is(':checked')) {
                    caseNoteDiv.find("#ClientDiv").focus();
                    customAlert("Please select Client(s)");
                    return false;
                }
                if (caseNoteDiv.find('#CaseNoteDetails_CaseNotetags').val().trim() == "") {
                    isValid = false;
                    customAlert("Tags are required.");
                    plainValidation('#CaseNoteDetails_CaseNotetags');
                    return isValid;
                }

                if (!caseNoteDiv.find('#StaffDiv').find('.staff-check').is(':checked')) {
                    caseNoteDiv.find("#StaffDiv").focus();
                    customAlert("Please select Development Team Staff(s)");
                    return false;
                }

                $('#HasCaseNoteDetails').val('True');

            }


            if (isValid) {
                var fileData = new FormData();
                var $cameraDocuments = $("#div-edit-modal-img-gallery").find('.setup_viewscreen');

                var cameraDocumentsArray = [];

                if ($cameraDocuments.length > 0) {

                    $.each($cameraDocuments, function (j, doc) {

                        var $doc = $(doc).find('img');
                        cameraDocumentsArray.push({ 'Text': 'CaseNoteAttachment', 'Value': self.getBase64Image($doc) });

                    });
                }

                // fileData.append("cameraUploads", JSON.stringify(cameraDocumentsArray));
               
                $('input[name="cameraUploads"]').val(JSON.stringify(cameraDocumentsArray));


                $('#spinner').show();
            }


            return isValid;
        }

        var _validFileExtensions1 = [".pdf", ".jpg", ".jpeg", ".bmp", ".gif", ".png"];
        function ValidateSingleInputpdf2(oInput, callback) {

            debugger;
            if (oInput.type == "file") {
                var sFileName = oInput.value;
                if (sFileName.length > 0) {
                    var blnValid = false;
                    var valid_size = 3 * 1000 * 1000;
                    var v = oInput.files[0].size;
                    if (v <= valid_size) {
                        for (var j = 0; j < _validFileExtensions1.length; j++) {
                            var sCurExtension = _validFileExtensions1[j];
                            if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
                                //  $('#DobverificationinPaper').prop("checked", false);
                                blnValid = true;
                                break;
                            }
                        }
                        if (!blnValid) {
                            oInput.value = "";
                            customAlertforlongtime("Supported formats (pdf,jpg,jpeg,bmp,gif,png)");
                            return false;
                        }
                    }
                    else {
                        oInput.value = "";
                        customAlertforlongtime("File size should not be greater than 3 MB. ");
                        return false;

                    }

                }
            }

            if (callback != null) {

                var $scrId = $(oInput).closest('.contact-entry-div').attr('id');

                //if (window.File && window.FileReader && window.FileList && window.Blob)
                //{
                //    handleFileSelect(oInput, $scrId);
                //}

                var imagetype = 1;


                callback(oInput, imagetype, $scrId);

                var targId = $(oInput).attr('data-target-id');
                $('#' + targId).modal('hide');

            }

            return true;
        }

    </script>
}

@section MainContentHolder{

    <div class="row Zoom">
        <div class="col-lg-12" style="padding:0;">

            <div class="page-wrapper-change">

                <div class="row">
                    <!------------Your Code----------------->
                    <div class="right-side-container-ch col-xs-12">
                        <!---Heading Section-->
                        <div class="col-xs-12" style="padding:0px 15px;margin-bottom:20px;">
                            <div class="col-lg-12">
                                <h2 class="page-header page-header-change" style="border-bottom:5px solid #f9c751!important;color:#fff;">
                                    <i class="fa fa-home"></i> @(homeFound ? "Home Found" : "Household Details")

                                    <span class="view-btn backto_listspan">
                                        <a href="javascript:void(0);" id="backtofamily" class="glossy-button-button glossy-button-hover button-pink">
                                            @(homeFound ? "Back to Roster" : "Back to Family Summary" )
                                            <span class="glossy-button-before"></span>
                                            <span class="glossy-button-after"></span>

                                        </a>
                                    </span>
                                </h2>
                            </div>
                        </div>



                        @using (Html.BeginForm((homeFound) ? "FamilyHouseless" : "HouseholdDetails", "AgencyUser", FormMethod.Post, new { @class = "col-xs-12", enctype = "multipart/form-data", autocomplete = false }))
                        {
                        <!---Heading Section-->
                        <!--Household-->

                            <div class="col-lg-12 col-xs-12 contact-entry-div" style="@(Model.FamilyHousehold.HomeType == 1 ? "display:none;" : "display:block;")" id="curr_house_div">

                                <fieldset>
                                    <legend id="contact-legend">Household</legend>


                                    @*<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 table-main" @if (Model.HasNewAddress) { <text> style="display:none;" </text>}>*@
                                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 table-main"
                                         style="@(Model.FamilyHousehold.HomeType == 1 || homeFound==true? "display:none;" : "display:block;")">
                                        <div class="add-useragform">

                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.FamilyHousehold.Street, new { @class = "icc_label lbl-required" })
                                                    @Html.TextBoxFor(m => m.FamilyHousehold.Street, new { @id = "Street", @class = "form-control", @maxlength = "50", @onblur = "CheckAddress(0);", @placeholder = "Address", @tabindex = "3" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">
                                                    @*<label class="icc_label" for="email">Apartment No., Lot No. </label>
                                                        <input class="form-control" id="StreetName" maxlength="100" name="StreetName" onblur="CheckAddress(0);" placeholder="Apartment No., Lot No." tabindex="4" type="text" value="1212">*@
                                                    @Html.LabelFor(m => m.FamilyHousehold.StreetName, new { @class = "icc_label" })
                                                    @Html.TextBoxFor(m => m.FamilyHousehold.StreetName, new { @id = "StreetName", @class = "form-control lbl-required", @maxlength = "100", @onblur = "CheckAddress(0);", @placeholder = "Apartment No., Lot No.", @tabindex = "4" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">
                                                    @*<label class="icc_label" for="email">Zip Code  <sup>*</sup></label>
                                                        <input class="form-control" id="ZipCode" maxlength="5" name="ZipCode" onblur="checkZipCode(this);" placeholder="Zip Code " tabindex="5" type="text" value="60001">*@

                                                    @Html.LabelFor(m => m.FamilyHousehold.ZipCode, new { @class = "icc_label lbl-required" })
                                                    @Html.TextBoxFor(m => m.FamilyHousehold.ZipCode, new { @id = "ZipCode", @class = "form-control lbl-required", @maxlength = "5", @onblur = "checkZipCode(this);", @placeholder = "Zip Code", @tabindex = "5" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">

                                                    @Html.LabelFor(m => m.FamilyHousehold.City, new { @class = "icc_label lbl-required" })


                                                    <select id="City" name="FamilyHousehold.City" class="form-control" tabindex="6">
                                                        <option value="@Model.FamilyHousehold.City">@Model.FamilyHousehold.City</option>
                                                    </select>

                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">
                                                    @* <label class="icc_label" for="email">State  <sup>*</sup></label>*@
                                                    @*<input class="form-control" id="State" maxlength="100" name="State" onblur="isSpclChar(this);" placeholder="State " readonly="readonly" tabindex="7" type="text" value="IL">*@
                                                    @Html.LabelFor(m => m.FamilyHousehold.State, new { @class = "icc_label lbl-required" })
                                                    @Html.TextBoxFor(m => m.FamilyHousehold.State, new { @id = "State", @class = "form-control", @maxlength = "100", @placeholder = "State", @onblur = "isSpclChar(this);", @tabindex = "7", @readonly = true })

                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.FamilyHousehold.County, new { @class = "icc_label lbl-required" })

                                                    @Html.TextBoxFor(m => m.FamilyHousehold.County, new { @id = "County", @class = "form-control", maxlength = "100", @placeholder = "County", @readonly = true, tabindex = "8" })

                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-12 col-sm-12">
                                                @*<div class="form-group">
                                                        <label class="icc_label">Address Verification Form <span style="font-weight: 300;font-size: 12px;">(pdf,jpg,jpeg,bmp,gif,png)</span> </label>
                                                        <input name="FileaddressAvatar" accept="image/*" capture="camera" class="form-control" id="FileaddressAvatar" onchange="ValidateSingleInputpdf(this)" style="width:65%;" tabindex="6" type="file" value="">
                                                        <div class="cont-sz" style="width: 85px;display:none; margin-left: 10px; float: right;">
                                                            <input class="minimal" data-val="true" data-val-required="The AdresssverificationinPaper field is required." id="AdresssverificationinPaper" name="AdresssverificationinPaper" tabindex="7" type="checkbox" value="true"><input name="AdresssverificationinPaper" type="hidden" value="false">
                                                            <label style="width:45px;">Paper</label>
                                                        </div>
                                                    </div>*@


                                                @if (Model.FamilyHousehold.docstorage == 0)
                                                {

                                                    @*<div class="form-group">
                                                            <label class="icc_label">Address Verification Form <span style="font-weight: 300;font-size: 12px;">(pdf,jpg,jpeg,bmp,gif,png)</span> </label>
                                                            @Html.TextBoxFor(m => m.FamilyHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:65%;", tabIndex = "6" })
                                                            <div class="cont-sz" style="width: 85px;display:none; margin-left: 10px; float: right;">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                                <label style="width:45px;">Paper</label>
                                                            </div>
                                                        </div>*@



                                                    <div class="form-group">
                                                        <label class="icc_label">Address Verification Form <span style="font-weight: 300;font-size: 12px;">(pdf,jpg,jpeg,bmp,gif,png)</span> </label>
                                                        <button type="button" class="custom-file-upload glossy-button-button glossy-button-hover button-pink" onclick="showCameraPopupmodal(this);">
                                                            <span class="glossy-button-before"></span>
                                                            <span class="glossy-button-after"></span>
                                                            <i class="fa fa-cloud-upload"></i>&nbsp;<span class="span-upload">
                                                                @(!string.IsNullOrEmpty(Model.FamilyHousehold.HFileInString) ? "Update Document" : "Add Document")
                                                            </span>
                                                        </button>







                                                        @Html.TextBoxFor(m => m.FamilyHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this,bindInputFile)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:65%;display:none;", tabIndex = "6" })
                                                        <div class="cont-sz" style="width: 85px;display:none; margin-left: 10px; float: right;">
                                                            @Html.CheckBoxFor(m => m.FamilyHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                            <label style="width:45px;">Paper</label>
                                                        </div>
                                                    </div>




                                                }
                                                @if (Model.FamilyHousehold.docstorage == 2)
                                                {


                                                    @*<div class="form-group">
                                                            <label>Address Verification Form</label>
                                                            <div class="cont-sz">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                                <label style="width:45px;">Paper</label>
                                                            </div>
                                                            @Html.TextBoxFor(m => m.FamilyHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:63%;display:none;", tabIndex = "6" })
                                                        </div>*@



                                                    <div class="form-group">
                                                        <label>Address Verification Form  </label>

                                                        <div class="cont-sz">
                                                            @Html.CheckBoxFor(m => m.FamilyHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                            <label style="width:45px;">Paper</label>
                                                        </div>


                                                        @Html.TextBoxFor(m => m.FamilyHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this,bindInputFile)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:63%;display:none;", tabIndex = "6" })


                                                        <button type="button" class="custom-file-upload glossy-button-button glossy-button-hover button-pink" onclick="showCameraPopupmodal(this);" style="display:none;">
                                                            <span class="glossy-button-before"></span>
                                                            <span class="glossy-button-after"></span>
                                                            <i class="fa fa-cloud-upload"></i>&nbsp;<span class="span-upload">
                                                                @(!string.IsNullOrEmpty(Model.FamilyHousehold.HFileInString) ? "Update Document" : "Add Document")
                                                            </span>
                                                        </button>



                                                    </div>

                                                }
                                            </div>


                                            <div class="col-lg-6 col-md-12 col-sm-12">


                                                <label id="lblFileName"></label>


                                                @if (!string.IsNullOrEmpty(Model.FamilyHousehold.HFileInString))
                                                {




                                                    <div class="glossy-attachment-icons-block" data-attach-id="8">
                                                        <div class="glossy-attachment-icon" data-toggle="tooltip" title="@Model.FamilyHousehold.HFileName">
                                                            @switch (Model.FamilyHousehold.HFileExtension)
                                                            {
                                                                case ".png":
                                                                    <img src="@Url.Content("~/Images/picture.png")" />
                                                                    break;
                                                                case ".jpg":
                                                                    <img src="@Url.Content("~/Images/picture.png")" />
                                                                    break;

                                                                case ".doc":
                                                                    <img src="@Url.Content("~/Images/doc.png")" />
                                                                    break;

                                                                case ".xls":
                                                                    <img src="@Url.Content("~/Images/excel.png")" />
                                                                    break;

                                                                case ".pdf":
                                                                    <img src="@Url.Content("~/Images/pdf.png")" />
                                                                    break;
                                                                case ".txt":
                                                                    <img src="@Url.Content("~/Images/file.png")" />
                                                                    break;


                                                                default:
                                                                    <img src="@Url.Content("~/Images/file.png")" />
                                                                    break;

                                                            }
                                                            <div class="glossy-attach-icon-div">
                                                                <i class="fa fa-trash delete-file" data-toggle="popover" onclick="deleteAttachment(this)" data-placement="top" aria-hidden="true" title="Delete Attachment"></i>



                                                                <a href="javascript:void(window.open('@Url.Action("GetAttachments","AgencyUser",new { id=string.Concat(Model.FamilyHousehold.HouseholdId,",Household,0")})' , 'newwindow','width=500,height=500'));">
                                                                    <i class="fa fa-eye view-file" data-toggle="tooltip" tile="view file" aria-hidden="true">
                                                                    </i>
                                                                </a>

                                                            </div>
                                                        </div>
                                                    </div>



                                                }




                                                <div class="setup_viewscreen-div" style="display:none;">
                                                    <img id="cap-img" class="setup_viewscreen-camera-div" />
                                                </div>

                                            </div>

                                            @Html.HiddenFor(m => m.FamilyHousehold.HFileInString, new { @id = "hFileString" })
                                            @Html.HiddenFor(m => m.FamilyHousehold.HFileName, new { @id = "hFileName" })
                                            @Html.HiddenFor(m => m.FamilyHousehold.HFileExtension, new { @id = "hFileExtension" })

                                        </div>

                                    </div>


                                    @*@if(Model.HasNewAddress)*@
                                    @if (Model.FamilyHousehold.HomeType == 1)
                                    {
                                        <div class="col-xs-12">
                                            <div class="text-center address-text" style="padding:20px;">Family does not having any address</div>
                                        </div>
                                    }

                                    @Html.Hidden("old_address", Model.FamilyHousehold.Street)
                                    @Html.Hidden("old_apartment", Model.FamilyHousehold.StreetName)
                                    @Html.Hidden("old_zipcode", Model.FamilyHousehold.ZipCode)
                                    @Html.Hidden("old_city", Model.FamilyHousehold.City)
                                    @Html.Hidden("old_rentType", Model.FamilyHousehold.RentType)
                                    @Html.Hidden("old_state", Model.FamilyHousehold.State)
                                    @Html.Hidden("old_county", Model.FamilyHousehold.County)
                                    @Html.Hidden("old_familyhomeless", Model.FamilyHousehold.HomeType)



                                </fieldset>
                            </div>

                        <!---Household-->
                        <!-- Family -->
                            <div class="col-lg-12 col-xs-12 contact-entry-div" style="@((homeFound) ? "display:none;" : "display:block;")">

                                <fieldset>
                                    <legend id="contact-legend">Family Household</legend>

                                    <div class="icc_contact_family">
                                        <div class="row">
                                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 table-main add-useragform1">

                                                <div class="col-lg-6 col-md-12 col-sm-12 adddivspace">
                                                    <div class="form-group">
                                                        <div class="col-sm-12">
                                                            @*<label class="icc_label"> Family Type <sup style="color:red;">*</sup></label>*@

                                                            @Html.LabelFor(m => m.FamilyHousehold.FamilyType, new { @class = "icc_label lbl-required" })
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.FamilyType, 1, new { @id = "FamilyType", onchange = "ShowHideDivParentTwo1()", tabIndex = "8", @disabled = "disabled" })
                                                                <span style="font-size: 14px;">Single Parent Family </span>
                                                            </label>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.FamilyType, 2, new { @id = "FamilyType1", onchange = "ShowHideDivParentTwo2()", tabIndex = "9", @disabled = "disabled" })
                                                                <span style="font-size: 14px;">Two Parent Family </span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-lg-6 col-md-12 col-sm-12 adddivspace">
                                                    <div class="form-group">
                                                        <div class="col-xs-8 col-sm-12">
                                                            @Html.LabelFor(m => m.FamilyHousehold.HomeType, new { @class = "icc_label lbl-required" })
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="radio-inline">






                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.HomeType, 1, new { @id = "HomeType1", tabIndex = "10", onchange = "Checkhouse(this)" })
                                                                <span>Yes</span>

                                                            </label>

                                                        </div>

                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.HomeType, 2, new { @id = "HomeType2", tabIndex = "10", onchange = "UnCheckhouse(this)" })
                                                                <span>No  </span>
                                                            </label>
                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="row col-sm-12">
                                                    <div class="col-lg-6 adddivspace" id="divrelationshipparent" style="display:none;">
                                                        <div class="form-group">
                                                            <div class="col-sm-12">
                                                                @Html.LabelFor(m => m.FamilyHousehold.ParentRelatioship, new { @class = "lbl-required" })
                                                            </div>
                                                            <div class="col-sm-9">

                                                                @{
                                                                    List<SelectListItem> ParentRelatioshipList = new List<SelectListItem>();
                                                                }
                                                                @Html.DropDownListFor(m => m.FamilyHousehold.ParentRelatioship, new SelectList(ParentRelatioshipList, "Value", "Text", Model.FamilyHousehold.ParentRelatioship), new { @id = "ParentRelatioship", @class = "form-control", onchange = "ShowdivParentotherrelationship();", @disabled = "disabled" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-6 adddivspace" id="married" style="display:none;">
                                                        <div class="form-group">
                                                            <div class="col-sm-12">
                                                                <div class="col-xs-8 col-sm-12">
                                                                    @Html.LabelFor(m => m.FamilyHousehold.Married, new { @class = "lbl-required" })
                                                                </div>
                                                                <div class="col-xs-6 col-sm-2">
                                                                    <label class="radio-inline">
                                                                        @Html.RadioButtonFor(m => m.FamilyHousehold.Married, 1, new { tabIndex = "22", id = "Married", @disabled = "disabled" })
                                                                        <span>Yes</span>
                                                                    </label>
                                                                </div>
                                                                <div class="col-xs-6 col-sm-2">
                                                                    <label class="radio-inline">
                                                                        @Html.RadioButtonFor(m => m.FamilyHousehold.Married, 2, new { tabIndex = "22", id = "Married1", @disabled = "disabled" })
                                                                        <span>No  </span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="row col-sm-12">
                                                    <div class="col-lg-6 adddivspace" id="divParentrelatioship" style="display:none;">
                                                        <div class="form-group">
                                                            <div class="col-xs-8">
                                                                @Html.LabelFor(m => m.FamilyHousehold.ParentRelatioshipOther, new { @class = "lbl-requried" })
                                                            </div>
                                                            <div class="col-xs-9">
                                                                @Html.TextBoxFor(m => m.FamilyHousehold.ParentRelatioshipOther, new { @id = "ParentRelatioshipOther", placeholder = "Other Relationship", maxlength = "20", @class = "form-control", tabIndex = "25", @disabled = "disabled" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-lg-6 col-md-12 col-sm-12 adddivspace">
                                                    <div class="form-group">
                                                        <div class="col-xs-8 col-sm-12">
                                                            @Html.LabelFor(m => m.FamilyHousehold.RentType, new { @class = "icc_label" })
                                                        </div>
                                                        <div class="col-xs-6 col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.RentType, "1", new { tabIndex = "12", id = "RentType1", onchange = "Renting(this);" })
                                                                <span>Renting </span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.RentType, "2", new { tabIndex = "13", id = "RentType2", onchange = "Buying(this);" })
                                                                <span>Buying</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.RentType, "3", new { tabIndex = "14", id = "RentType3", onchange = "SubsidizedRent(this);" })
                                                                <span>Subsidized Rent</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-6">
                                                            <label class="radio-inline">
                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.RentType, "4", new { tabIndex = "15", id = "RentType4", onchange = "NoPayment(this);" })
                                                                <span>No Payment </span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-lg-6 col-md-12 col-sm-12 adddivspace" id="chk">

                                                    <div class="form-group">
                                                        <div class="col-xs-8 col-sm-12">
                                                            <label class="icc_label">Federal or Other Assistance <sup style="color:red;">*</sup></label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="checkbox-inline">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.TANF, new { @id = "TANF", @class = "minimal", @onchange = "uncheckdataNone();", tabIndex = "16" })
                                                                <span>TANF</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="checkbox-inline">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.SSI, new { @id = "SSI", @class = "minimal", @onchange = "uncheckdataNone();", tabIndex = "17" })
                                                                <span>SSI</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="checkbox-inline">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.SNAP, new { @id = "SNAP", @class = "minimal", @onchange = "uncheckdataNone();", tabIndex = "18" })
                                                                <span>SNAP</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="checkbox-inline">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.WIC, new { @id = "WIC", @class = "minimal", @onchange = "uncheckdataNone();", tabIndex = "19" })


                                                                <span>WIC</span>
                                                            </label>
                                                        </div>

                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="checkbox-inline">
                                                                @Html.CheckBoxFor(m => m.FamilyHousehold.NONE, new { @id = "None", @class = "minimal", @onchange = "uncheckdata();", tabIndex = "20" })
                                                                <span>NONE</span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>


                                                <div class="row col-lg-12">
                                                    <div class="col-lg-6 col-md-6 col-sm-12 adddivspace">
                                                        <div class="form-group">
                                                            <div class="col-lg-8 col-sm-12 col-xs-12">
                                                                <label for="email" class="icc_label">Primary Language Spoken  <sup style="color:red;">*</sup></label>
                                                            </div>
                                                            <div class="col-lg-6 col-sm-9 col-xs-12">
                                                                @Html.DropDownListFor(m => m.FamilyHousehold.PrimaryLanguauge, new SelectList(Model.FamilyHousehold.langList, "LangId", "Name"), new { @id = "PrimaryLanguauge", @class = "form-control", onchange = "Showotherlanguage();", tabIndex = "21" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-6 adddivspace">
                                                        <div class="form-group">
                                                            <div class="col-sm-12 no-pad-res">
                                                                <div class="col-md-8 col-sm-12 col-xs-12">
                                                                    <label class="icc_label lbl-required">Does family need an Interpreter?</label>
                                                                </div>
                                                                <div class="col-xs-6 col-sm-2">
                                                                    <label class="radio-inline">
                                                                        @Html.RadioButtonFor(m => m.FamilyHousehold.Interpretor, 1, new { tabIndex = "22", id = "Interpretor" })
                                                                        <span>Yes</span>
                                                                    </label>
                                                                </div>
                                                                <div class="col-xs-6 col-sm-2">
                                                                    <label class="radio-inline">
                                                                        @Html.RadioButtonFor(m => m.FamilyHousehold.Interpretor, 2, new { tabIndex = "22", id = "Interpretor1" })
                                                                        <span>No  </span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-lg-6 adddivspace" id="div2" style="display:none;">
                                                    <div class="form-group">
                                                        <div class="col-xs-8">
                                                            <label for="email" class="icc_label">Other Language Detail</label>
                                                        </div>
                                                        <div class="col-xs-9">
                                                            @Html.TextBoxFor(m => m.FamilyHousehold.OtherLanguageDetail, new { @id = "OtherLanguageDetail", placeholder = "Other Language Detail", maxlength = "20", @class = "form-control", tabIndex = "25" })

                                                        </div>
                                                    </div>
                                                </div>





                                                <!--new method 12-14-18-->
                                                <div class="col-lg-6 adddivspace" id="makedFamilyHomeless"
                                                     style="@(Model.FamilyHousehold.HomeType != 1 ? "display:none;" : "")">
                                                    <div class="form-group">
                                                        <div class="col-xs-12 col-lg-12 col-md-12 col-sm-12">

                                                            @Html.LabelFor(m => m.FamilyHousehold.FamilyHasAddress, new { @class = "icc_label lbl-required" })

                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="radio-inline">

                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.FamilyHasAddress, 1, new { tabIndex = "23", @id = "hasNewAddress1", })

                                                                <span>Yes</span>
                                                            </label>
                                                        </div>
                                                        <div class="col-xs-6 col-sm-2">
                                                            <label class="radio-inline">

                                                                @Html.RadioButtonFor(m => m.FamilyHousehold.FamilyHasAddress, 2, new { tabIndex = "24", @id = "hasNewAddress1" })

                                                                <span>No  </span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>



                                            </div>
                                        </div>

                                    </div>

                                </fieldset>
                            </div>
                        <!-- Family-->
                        <!---New Address-->
                                                                    <div class="col-lg-12 col-xs-12 contact-entry-div" id="newAddressDiv" style="@((Model.FamilyHousehold.HomeType == 1 && Model.FamilyHousehold.FamilyHasAddress == 1) ||homeFound==true ? "display:block;" : "display:none;")">


                                                                        @{

                                                                            string householdAddress = (Model.FamilyHousehold.HomeType == 1 && Model.FamilyHousehold.FamilyHasAddress == 1 && ViewBag.HomeFound == false) ? "Contact Address" : "New Address";
                                                                        }


                                                                        <fieldset>
                                                                            <legend id="contact-legend">@householdAddress</legend>

                                                                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 table-main">
                                                                                <div class="add-useragform">

                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">
                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.Street, new { @class = "icc_label lbl-required" })
                                                                                            @Html.TextBoxFor(m => m.NewAddressHousehold.Street, new { @id = "Street1", @class = "form-control", @maxlength = "50", @onblur = "CheckAddressNew(0);", @placeholder = "Address", @tabindex = "3" })
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">
                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.StreetName, new { @class = "icc_label" })
                                                                                            @Html.TextBoxFor(m => m.NewAddressHousehold.StreetName, new { @id = "StreetName1", @class = "form-control lbl-required", @maxlength = "100", @onblur = "CheckAddressNew(0);", @placeholder = "Apartment No., Lot No.", @tabindex = "4" })
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">
                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.ZipCode, new { @class = "icc_label lbl-required" })
                                                                                            @Html.TextBoxFor(m => m.NewAddressHousehold.ZipCode, new { @id = "ZipCode1", @class = "form-control lbl-required", @maxlength = "5", @onblur = "checkZipCodeNew(this);", @placeholder = "Zip Code", @tabindex = "5" })
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">

                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.City, new { @class = "icc_label lbl-required" })

                                                                                            <select id="City1" name="NewAddressHousehold.City" class="form-control" tabindex="6">
                                                                                                <option value="@Model.NewAddressHousehold.City">@Model.NewAddressHousehold.City</option>
                                                                                            </select>

                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">

                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.State, new { @class = "icc_label lbl-required" })
                                                                                            @Html.TextBoxFor(m => m.NewAddressHousehold.State, new { @id = "State1", @class = "form-control", @maxlength = "100", @placeholder = "State", @onblur = "isSpclChar(this);", @tabindex = "7", @readonly = true })

                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">
                                                                                        <div class="form-group">
                                                                                            @Html.LabelFor(m => m.NewAddressHousehold.County, new { @class = "icc_label lbl-required" })

                                                                                            @Html.TextBoxFor(m => m.NewAddressHousehold.County, new { @id = "County1", @class = "form-control", maxlength = "100", @placeholder = "County", @readonly = true, tabindex = "8" })

                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">

                                                                                        @if (Model.FamilyHousehold.docstorage == 0)
                                                                                        {






                                                                                            <div class="form-group">
                                                                                                <label class="icc_label">Address Verification Form <span style="font-weight: 300;font-size: 12px;">(pdf,jpg,jpeg,bmp,gif,png)</span> </label>
                                                                                                <button type="button" class="custom-file-upload glossy-button-button glossy-button-hover button-pink" onclick="showCameraPopupmodal(this);">
                                                                                                    <span class="glossy-button-before"></span>
                                                                                                    <span class="glossy-button-after"></span>
                                                                                                    <i class="fa fa-cloud-upload"></i>&nbsp;<span class="span-upload">
                                                                                                        @(!string.IsNullOrEmpty(Model.NewAddressHousehold.HFileInString) ? "Update Document" : "Add Document")
                                                                                                    </span>
                                                                                                </button>


                                                                                                @Html.TextBoxFor(m => m.NewAddressHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this,bindInputFile)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:65%;display:none;", tabIndex = "6" })
                                                                                                <div class="cont-sz" style="width: 85px;display:none; margin-left: 10px; float: right;">
                                                                                                    @Html.CheckBoxFor(m => m.NewAddressHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                                                                    <label style="width:45px;">Paper</label>
                                                                                                </div>
                                                                                            </div>


                                                                                        }
                                                                                        @if (Model.FamilyHousehold.docstorage == 2)
                                                                                        {

                                                                                            <div class="form-group">
                                                                                                <label>Address Verification Form  </label>

                                                                                                <div class="cont-sz">
                                                                                                    @Html.CheckBoxFor(m => m.NewAddressHousehold.AdresssverificationinPaper, new { @id = "AdresssverificationinPaper", @class = "minimal", tabIndex = "7" })
                                                                                                    <label style="width:45px;">Paper</label>
                                                                                                </div>


                                                                                                @Html.TextBoxFor(m => m.NewAddressHousehold.FileaddressAvatar, new { @id = "FileaddressAvatar", type = "file", onchange = "ValidateSingleInputpdf2(this,bindInputFile)", @class = "form-control", @accept = "image/*", @capture = "camera", @style = "width:63%;display:none;", tabIndex = "6" })


                                                                                                <button type="button" class="custom-file-upload glossy-button-button glossy-button-hover button-pink" onclick="showCameraPopupmodal(this);" style="display:none;">
                                                                                                    <span class="glossy-button-before"></span>
                                                                                                    <span class="glossy-button-after"></span>
                                                                                                    <i class="fa fa-cloud-upload"></i>&nbsp;<span class="span-upload">
                                                                                                        @(!string.IsNullOrEmpty(Model.FamilyHousehold.HFileInString) ? "Update Document" : "Add Document")
                                                                                                    </span>
                                                                                                </button>



                                                                                            </div>


                                                                                        }
                                                                                    </div>


                                                                                    <div class="col-lg-6 col-md-12 col-sm-12">

                                                                                        <label id="lblFileName"></label>


                                                                                        @if (!string.IsNullOrEmpty(Model.NewAddressHousehold.HFileInString))
                                                                                        {




                                                                                            <div class="glossy-attachment-icons-block" data-attach-id="8">
                                                                                                <div class="glossy-attachment-icon" data-toggle="tooltip" title="@Model.NewAddressHousehold.HFileName">
                                                                                                    @switch (Model.NewAddressHousehold.HFileExtension)
                                                                                                    {
                                                                                                        case ".png":
                                                                                                            <img src="@Url.Content("~/Images/picture.png")" />
                                                                                                            break;
                                                                                                        case ".jpg":
                                                                                                            <img src="@Url.Content("~/Images/picture.png")" />
                                                                                                            break;

                                                                                                        case ".doc":
                                                                                                            <img src="@Url.Content("~/Images/doc.png")" />
                                                                                                            break;

                                                                                                        case ".xls":
                                                                                                            <img src="@Url.Content("~/Images/excel.png")" />
                                                                                                            break;

                                                                                                        case ".pdf":
                                                                                                            <img src="@Url.Content("~/Images/pdf.png")" />
                                                                                                            break;
                                                                                                        case ".txt":
                                                                                                            <img src="@Url.Content("~/Images/file.png")" />
                                                                                                            break;


                                                                                                        default:
                                                                                                            <img src="@Url.Content("~/Images/file.png")" />
                                                                                                            break;

                                                                                                    }
                                                                                                    <div class="glossy-attach-icon-div">
                                                                                                        <i class="fa fa-trash delete-file" data-toggle="popover" onclick="deleteAttachment(this)" data-placement="top" aria-hidden="true" title="Delete Attachment"></i>


                                                                                                        <a href="javascript:void(window.open('@Url.Action("GetAttachments","AgencyUser",new { id=string.Concat(Model.NewAddressHousehold.HouseholdId,",Household,0")})' , 'newwindow','width=500,height=500'));">
                                                                                                            <i class="fa fa-eye view-file" data-toggle="tooltip" tile="view file" aria-hidden="true">
                                                                                                            </i>
                                                                                                        </a>

                                                                                                    </div>
                                                                                                </div>
                                                                                            </div>



                                                                                        }


                                                                                        <div class="setup_viewscreen-div" style="display:none;">
                                                                                            <img id="cap-img" class="setup_viewscreen-camera-div" />

                                                                                        </div>

                                                                                    </div>

                                                                                    @Html.HiddenFor(m => m.NewAddressHousehold.HFileInString, new { @id = "hFileString" })
                                                                                    @Html.HiddenFor(m => m.NewAddressHousehold.HFileName, new { @id = "hFileName", @value = "AddressVerificationForm" })
                                                                                    @Html.HiddenFor(m => m.NewAddressHousehold.HFileExtension, new { @id = "hFileExtension", @value = ".png" })
                                                                                </div>

                                                                            </div>




                                                                        </fieldset>
                                                                    </div>

                        <!---New Address-->
                        <!---Case Notes-->
                        <!-- Family -->
                                                                            <div class="col-lg-12 col-xs-12 contact-entry-div" id="caseNoteDiv" style="margin-top: 20px; margin-bottom: 20px; display:none;">

                                                                                <fieldset>
                                                                                    <legend id="contact-legend">Case Note</legend>

                                                                                    <div class="case_ic_family">
                                                                                        <div class="col-lg-12 col-md-12 col-sm-12 no-padding">
                                                                                            <div class="col-lg-8 col-md-12 col-sm-12 col-xs-12 mlt_spaces">
                                                                                                <div class="form-group ic_case_note">
                                                                                                    @Html.LabelFor(m => m.CaseNoteDetails.CaseNoteDate, new { @class = "col-md-4 col-sm-12 col-xs-12 no-padding lbl-required" })

                                                                                                    @Html.TextBoxFor(m => m.CaseNoteDetails.CaseNoteDate, new { @class = "form-control col-md-8 col-sm-12 col-xs-12 no-padding", tabindex = "9", placeholder = "MM/DD/YYYY", onblur = "CheckdateHouseless(this);" })
                                                                                                </div>
                                                                                            </div>
                                                                                            <div class="col-lg-8 col-md-12 col-sm-12">
                                                                                                <div class="form-group  ic_case_note">

                                                                                                    @Html.LabelFor(m => m.CaseNoteDetails.CaseNotetitle, new { @class = "col-md-4 col-sm-12 col-xs-12 no-padding lbl-required" })
                                                                                                    @Html.TextBoxFor(m => m.CaseNoteDetails.CaseNotetitle, new { @clss = "form-control col-md-8 col-sm-12 col-xs-12 no-padding", tabindex = "10", maxlength = "50", placeholder = "Case Note Title" })
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-lg-8 col-md-12 col-sm-12">
                                                                                            <div class="form-group ic_case_note">
                                                                                                @Html.LabelFor(m => m.CaseNoteDetails.Note, new { @class = "col-md-4 col-sm-12 col-xs-12 no-padding lbl-required" })

                                                                                                <div class="addn-poup-div1 col-md-8 col-sm-12 col-xs-12 no-padding">
                                                                                                    @Html.TextAreaFor(m => m.CaseNoteDetails.Note, new { @style = "visibility: hidden; display: none;" })
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>



                                                                                        <div class="col-lg-8 col-md-12 col-sm-12 mmt_bottom mlt_spaces">
                                                                                            <label for="email" class="col-md-4 col-sm-12 col-xs-12 no-padding lbl-required">Client(s)</label>
                                                                                            <div id="ClientDiv" class="case-note" style="width: 65%;float: left;margin-bottom: 10px;">

                                            @if (Model.UsersList != null && Model.UsersList.Clientlist != null && Model.UsersList.Clientlist.Count > 0)
                                            {
                                                for (int i = 0; i < Model.UsersList.Clientlist.Count; i++)
                                                {
                                                    <div class="col-sm-12 m-tp mt-bmn">

                                                        <input type="checkbox" class="client-check" name="UsersList.clientlist[@i].Id" value="@Model.UsersList.Clientlist[i].Id">
                                                        @*<input type="checkbox" class="client-check" name="UsersList.Clientlist[]Id" value="@Model.UsersList.Clientlist[i].Id">*@
                                                        <span name="UsersList.clientlist[@i].Name">@Model.UsersList.Clientlist[i].Name</span>
                                                    </div>
                                                }

                                            }
                                            <input type="hidden" id="clientids" name="clientids" />
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 no-padding">
                                            <div class="col-sm-12 no-padding" style="margin-bottom:20px;">
                                                <div class="form-group">

                                                    @Html.LabelFor(m => m.CaseNoteDetails.CaseNotetags, new { @class = "col-md-4 col-sm-12 col-xs-12 no-padding lbl-required" })

                                                    <div class="addn-poup-div1 col-md-8 col-sm-12 col-xs-12 no-padding">
                                                        @Html.TextBoxFor(m => m.CaseNoteDetails.CaseNotetags, new { @class = "form-control ui-autocomplete-input" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-12 no-padding">
                                                <div class="form-group">
                                                    <label for="email" class="col-md-4 col-sm-12 col-xs-12 no-padding lbl-required">Developmental Team </label>
                                                    <div id="StaffDiv" class="case-note col-md-8 col-sm-12 col-xs-12 no-padding">


                                                        @if (Model.UsersList != null && Model.UsersList.UserList != null && Model.UsersList.UserList.Count > 0)

                                                        {
                                                            for (int j = 0; j < Model.UsersList.UserList.Count; j++)
                                                            {
                                                                <div class="col-sm-12 m-tp mt-bmn">
                                                                    <input type="checkbox" class="staff-check" name="UsersList.UserList[@j].Id" value="@Model.UsersList.UserList[j].Id">
                                                                    <span name="UsersList.UserList[@j].Name">@Model.UsersList.UserList[j].Name</span>
                                                                </div>
                                                            }
                                                        }


                                                        <input type="hidden" id="staffIds" name="staffIds" />

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 no-padding">
                                            <div class="col-sm-12 no-padding">
                                                <div class="form-group mlt_spaces">

                                                    @Html.LabelFor(m => m.CaseNoteDetails.CaseNoteSecurity, new { @class = "col-md-4 col-sm-12 col-xs-12 no-padding" })

                                                    <div class="addn-poup-div1 col-md-8 col-sm-12 col-xs-12 no-padding">
                                                        @Html.CheckBoxFor(m => m.CaseNoteDetails.CaseNoteSecurity, new { style = "margin-left:5px;top:0;" })
                                                        @*<input type="checkbox" id="CaseNoteDetails_CaseNoteSecurity" value="true" name="CaseNoteDetails.CaseNoteSecurity" style="margin-left:5px;top:0;">*@
                                                        <span style="margin-top:10px;float:left;">Yes</span>
                                                    </div>
                                                </div>
                                            </div>

                                                                                            </div>



                                                                                            <div class="col-lg-12 col-md-12 col-sm-12 no-padding">
                                                                                                <div class="col-sm-12 no-padding">
                                                                                                    <div class="form-group mlt_spaces" id="section_attachment_div">
                                                                                                        <label class="col-md-4 col-sm-12 col-xs-12 no-padding">Attachment</label>
                                                                                                        <div class="addn-poup-div1 col-md-8 col-sm-12 col-xs-12 no-padding">
                                                                                                            <input name="CaseNoteAttachments[0].file" accept="image/*" capture="camera" class="form-control houseless-attach" id="CaseNoteAttachments_0_file" style="width:54%;display:inline-block;margin-right:10px;" onchange="ValidateSingleInputpdf2(this,null);" tabindex="6" type="file" value="">
                                                                                                            <a href="javascript:void(0)" id="Attachmectstag" title="Add Attachment" onclick="addMore(this);" style="padding: 0;"><i class="fa fa-plus-circle"></i>&nbsp;Add</a>
                                                                                                            <img id="uploadImageCamera" class="img-camera" data-toggle="tooltip" src="/Images/camera.png" title="" data-original-title="Capture using Camera" />


                                                                                                        </div>
                                                                                                        <div class="import_ft_files" style="margin-top:10px;margin-left:16px;">

                                                                                                        </div>

                                                                                                        <div class="addn-poup-div1 col-md-8 col-sm-12 col-xs-12 no-padding" style="float:right;" id="div-edit-modal-img-gallery">

                                                                                                        </div>
                                                                                                        <input type="hidden" name="cameraUploads" />
                                                                                                    </div>
                                                                                                </div>


                                        </div>

                                    </div>
                                </div>


                                                                                </fieldset>
                                                                            </div>
                                                                            <div class="form-group final-btn">
                                                                                <button class="glossy-button-button glossy-button-hover button-green" type="submit" id="householdSubmit" onclick="return SaveHouseholdDetails();">
                                                                                    Submit
                                                                                    <span class="glossy-button-before"></span>
                                                                                    <span class="glossy-button-after"></span>

                                                                                </button>
                                                                                &nbsp;&nbsp;
                                                                                <button class="glossy-button-button glossy-button-hover button-red" type="button" id="householdExit">
                                                                                    Exit
                                                                                    <span class="glossy-button-before"></span>
                                                                                    <span class="glossy-button-after"></span>

                                                                                </button>
                                                                            </div>

                        @Html.HiddenFor(m=>m.FamilyHousehold.Encrypthouseholid)
                         @Html.HiddenFor(m=>m.FamilyHousehold.HouseholdId)

                        @Html.Hidden("householdId", Model.FamilyHousehold.HouseholdId)

                            @Html.Hidden("enhousehold",Model.FamilyHousehold.Encrypthouseholid)
                                     

                         @Html.HiddenFor(m=>m.HasCaseNoteDetails)
                        @Html.HiddenFor(m=>m.HasNewAddress)
}
                        <!---Case Notes-->
                    </div>
                </div>
               
            </div>
        </div>
    </div>



    @{
        Html.RenderPartial(Url.Content("~/Views/Partialviews/_FileInput_CameraUploadPartial.cshtml"));
    }

    @{

        Html.RenderPartial(Url.Content("~/Views/Partialviews/_MultipleCameraUploadPartial.cshtml"));
    }
}

