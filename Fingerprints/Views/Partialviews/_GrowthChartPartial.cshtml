@using System.Threading;
@using System.Globalization;
@using Fingerprints;
@using System.Resources;
@using System.Collections;
@using Newtonsoft.Json;
@using Fingerprints.LocalResource;

<script src="~/Content/underscore-min.js"></script>
<script src="~/Scripts/amcharts.js"></script>
<script src="~/Scripts/serial.js"></script>
@*<script src="https://www.amcharts.com/lib/3/xy.js"></script>*@
<script src="~/Scripts/amcharts/xy.js"></script>
<script src="~/Scripts/amcharts/plugins/export/export.min.js"></script>

<script src="~/Scripts/amcharts/plugins/export/libs/fabric.js/fabric.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/FileSaver.js/FileSaver.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/pdfmake/pdfmake.min.js"></script>
<script src="~/Scripts/amcharts/plugins/export/libs/pdfmake/vfs_fonts.js"></script>
<script src="~/Scripts/amcharts/plugins/responsive.min.js"></script>

<link href="~/Scripts/amcharts/plugins/export/export.css" rel="stylesheet" />

@{
//Thread.CurrentThread.CurrentUICulture = new CultureInfo("es");
}

<style type="text/css">
        .page-wrapper-change {
            background-image: url(../../Images/body-bg.jpg);
            background-size: cover !important;
            background-position: 100% 100% !important;
        }

        .amcharts-main-div text { /* For IE and Edge label Issue*/
            line-height: 1.4285 !important;
        }

        .download-single {
            display: block;
            overflow: hidden;
            text-indent: -13333337px;
            width: 36px;
            height: 36px;
            padding: 0;
            background-repeat: no-repeat;
            top: -5px;
            right: 15px;
            position: absolute;
            cursor: pointer;
            background-image: url('data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%2211px%22%20height%3D%2214px%22%3E%3Cpath%20d%3D%22M3%2C0%20L8%2C0%20L8%2C5%20L11%2C5%20L5.5%2C10%20L0%2C5%20L3%2C5%20L03%2C0%22%20fill%3D%22%23888%22%2F%3E%3Crect%20x%3D%220%22%20y%3D%2212%22%20fill%3D%22%23888%22%20width%3D%2211%22%20height%3D%222%22%2F%3E%3C%2Fsvg%3E');
            background-color: #fff;
            background-position: center;
            -webkit-box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
            -moz-box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
            box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.5);
            border-radius: 18px;
            margin: 8px 8px 0 10px;
        }

        #modal-edit-growth .modal-dialog-ch {
        width: 70%;
        margin: 20px 15%;
    }
        #modal-edit-growth .modal-body,  #modal-edit-growth .modal-body {
        background: #34495e none repeat scroll 0 0;
        border: 6px solid #ffffff;
        border-radius: 3px;
        /* color: #ffffff; */
        float: left;
        padding: 15px 3%;
        position: relative;
        width: 100%;
    }
        #modal-edit-growth .max_items_addn, #modal-edit-growth .max_items_addn {
        background: #f1f5f8 none repeat scroll 0 0;
        border: 3px solid #ffffff;
        float: left;
        padding: 10px;
        width: 100%;
        margin-bottom: 20px;
        border-radius: 4px;
    }
        #modal-edit-growth .modal-body > h2, #modal-edit-growth .modal-body>h2 {
        margin-top: 10px;
        float: left;
        font-size: 24px;
        font-weight: 600;
        text-align: center;
        width: 100%;
        margin-bottom: 20px;
        color: #fff;
    }

        @@media only screen and (max-width: 767px) {
            #page-wrapper h2 {
        font-size: 20px !important;
    }
            .page-header-change{font-size: 20px !important;padding-bottom: 15px!important;}
             .page-header-change span
            {
                margin-bottom: 11px!important;
        float: left!important;
            }
        }
        #HeadCircuchart,#Heightchart,
        #Weightchart,#Weight_LengthtChart, #BMIchart {
         height:600px;
         width:100%;
         background:#fff;
        }
</style>


<div class="row">

    @*<div class="col-lg-12">
            <h2>

                <button type="button" class="btn btn-default" onclick="window.history.back()" style="margin-top: 10px;background:#9b59b6 !important;border-radius: 0px;">
                    <i class="fa fa-arrow-left" style="padding-right:5px;"></i><span>Back</span>
                </button>
            </h2>
        </div>*@


    <div class="col-lg-12">
        <h2 class="page-header page-header-change" style="border-bottom:5px solid #f9c751!important;color:#fff;text-transform:none;margin-top:0px !important;">
            <span><i class="fa fa-bar-chart-o" aria-hidden="true"></i>&nbsp; @Fingerprints.LocalResource.Resources.GrowthChartof @ViewBag.ClientDetail.ChildName</span>


            @*@if (Session["RoleId"].ToString() == @EnumHelper.GetEnumDescription(RoleEnum.Teacher).ToLowerInvariant())
                {
                    <a href="@Url.Action("Roster", "Teacher")" class="btn pull-right" style="color:#fff;background:#9b59b6">Back to Roster</a>
                }
                else
                {
                    <a href="@Url.Action("Roster", "Roster")" class="btn pull-right" style="color:#fff;background:#9b59b6">Back to Roster</a>
                }*@



            <button type="button" class="glossy-button-button glossy-button-hover pull-right" style="margin-right:5px;" id="download-all">
                @Resources.Export_All
                <span class="glossy-button-after"></span><span class="glossy-button-before"></span>
            </button>
            <select name="input-drop" id="input-drop" class="form-control" style="width:185px;margin-right:10px; display:inline-block;float:right">
                <option value="1" selected>Imperial (Inches/LBS)</option>
                <option value="2">Metrical (CM/Kgs)</option>
            </select>

            <select name="type-drop" id="type-drop" class="form-control" style="width:80px;margin-right:10px; display:inline-block;float:right">
                @{ 

                    var _cD = ViewBag.ClientDetail as FingerprintsModel.Clientprofile;
                }

         @if (_cD != null && _cD.ProgramHistroy != null && _cD.ProgramHistroy.Count > 0)
         {
             if (_cD.ProgramHistroy.FirstOrDefault(x => x == "EHS") != null) {
                <option value="1" @(ViewBag.Type == 1 ? "selected" : "")>EHS</option>
             }
             if (_cD.ProgramHistroy.FirstOrDefault(x => x == "HS") != null)
             {
                <option value="2" @(ViewBag.Type == 2 ? "selected" : "")>HS</option>
             }
         }
            </select>

        </h2>
    </div>
</div>



@if (ViewBag.Type == 1) //only for 0-24 Months
{

    <div class="row">
        <div class="col-md-12">

            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        @Fingerprints.LocalResource.Resources.HeadCircumferencevsAge
                        <a class="download-single" data-type="HeadCircuchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                    </h2>

                </div>
                <div class="panel-body">
                    <div id="HeadCircuchart"></div> <!--500px-->
                </div>
            </div>

        </div>

    </div>

}

<div class="row">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.LengthvsAge
                    <a class="download-single" data-type="Heightchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="Heightchart"></div>

            </div>
        </div>

    </div>

</div>

<div class="row" id="weightrow">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Fingerprints.LocalResource.Resources.WeightvsAge
                    <a class="download-single" data-type="Weightchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="Weightchart"></div>

            </div>
        </div>

    </div>

</div>


@if (ViewBag.Type == 1) //only for 0-24 Months
{


    <div class="row">
        <div class="col-md-12">

            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        @Fingerprints.LocalResource.Resources.WeightvsLength
                        <a class="download-single" data-type="Weight_LengthtChart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                    </h2>
                </div>
                <div class="panel-body">
                    <div id="Weight_LengthtChart"></div>
                </div>
            </div>

        </div>

    </div>


}
else
{  //only for 2-5 Year

<div class="row" id="bmirow">
    <div class="col-md-12">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h2 class="panel-title">
                    @Resources.BMI_Vs_Age
                    <a class="download-single" data-type="BMIchart" data-toggle="tooltip" data-placement="left" title="@Resources.Export_PDF"></a>
                </h2>
            </div>
            <div class="panel-body">
                <div id="BMIchart"></div>

            </div>
        </div>

    </div>

</div>

}
@{ 
    var _clrs = new string[9] { "#86A8FA", "#8DD663", "#F9AC78", "#FDEA72", "#E39698", "#EAC7EA", "#889498", "#B0D9E5", "#A0A0A0" };
}
<script type="text/javascript">

    @{ 
        var _parRole = FingerprintsModel.Role.RolesDictionary[(int)FingerprintsModel.RoleEnum.Parent].ToLowerInvariant();
        var _curRole = "";
        if (Session["RoleId"] != null) {
            _curRole = Session["RoleId"].ToString().ToLowerInvariant();
        }
        var _chUrl = @Url.Action("GrowthChart", "Teacher");

        //?client=@ViewBag.eClientId&type=
    }
    @if(_curRole == _parRole) {
        _chUrl= @Url.Action("ClientGrowthChart", "Parent");
    }

    var _GCUrls = {
        _getGrowthChart: '@Url.Action("GetGrowthChart", "Teacher")?eClientID=',
        _ChartUrl: '@_chUrl'+'?client=@ViewBag.eClientId'+'&type='
    };
    var _GCcons = {
        eClientId: "@ViewBag.eClientId",
        oneCm: 0.393701,  //1cm =0.393701 inches
        oneKg: 2.20462,   //1kg = 2.20462 pounds
        type:@ViewBag.Type //1=> 0-24 mnths, 2=> 2-5 yr
        };

    var _GCObj = {
        init: function () {
            var self = this;
            self.initEvents();
            self.getChartData();

        },
        cons: _GCcons,
        urls: _GCUrls,
        chartComn:{
            minHorizontalGap:24,
        "export":{
                    "enabled": true,
            "menu": [{
                "class": "export-main",
                // "menu": ["PDF"]
                "menu": []
            }]
        },
            legend: {
                "equalWidths": false,
                "useGraphSettings": true,
                "valueAlign": "left",
                //"valueWidth": 120
            },
            chartCursor: {
                "valueLineEnabled": true,
                "valueLineBalloonEnabled": true,
                "valueLineAlpha": 0.5,
                "fullWidth": true,
                "cursorAlpha": 0.05,
            },
            valueAxes:function(xaxis,yaxis){

                return [{
                    "position": "bottom",
                    "axisAlpha": 0,
                    "dashLength": 1,
                    "title": xaxis
                }, {
                    "axisAlpha": 0,
                    "dashLength": 1,
                    "position": "left",
                    "title": yaxis
                }];
            }
        },
        data: [],
        gInputType:"1", //global input type 1-imperial, 2 -metric
        initEvents() {
            var self = this;

            $('[data-toggle="tooltip"]').tooltip();


            $(document).on("change", "#type-drop", function (e) {
                e.preventDefault();
                window.location.href=_GCObj.urls._ChartUrl+$(this).val();
            });

            $(document).on("change", "#input-drop", function (e) {
                e.preventDefault();
                self.gInputType = $(this).val();
                $("#spinner").show();
                self.renderChart(self.data);
            });

            $(document).on("click", ".download-single", function (e) {
                e.preventDefault();
                var _chartType = $(this).data("type");
                self.generatePdf(_chartType);
            });

            $(document).on("click", "#download-all", function (e) {
                e.preventDefault();

                // $("input[name='GridHtml']").val($("#weightrow").html());

                // $("#exform").submit();
                self.generatePdf('All');

            });
        },
        generatePdf: function (charts) {
            var self = this;
            $("#spinner").show();

            var ids = [];
            if (charts == 'All') {
                if(self.cons.type==1){
                    ids = ["HeadCircuchart", "Heightchart", "Weightchart", "Weight_LengthtChart"];
                }else{
                    ids = [ "Heightchart", "Weightchart", "BMIchart"];
                }
            } else {

                ids.push(charts);
            }

            var charts = {}
            var charts_remaining = ids.length;
            for (var i = 0; i < ids.length; i++) {
                for (var x = 0; x < AmCharts.charts.length; x++) {
                    if (AmCharts.charts[x].div && AmCharts.charts[x].div.id == ids[i])
                        charts[ids[i]] = AmCharts.charts[x];
                }
            }

            // Trigger export of each chart
            for (var x in charts) {
                if (charts.hasOwnProperty(x)) {
                    var chart = charts[x];
                    chart["export"].capture({}, function () {
                        this.toPNG({}, function (data) {

                            // Save chart data into chart object itself
                            this.setup.chart.exportedImage = data;

                            // Reduce the remaining counter
                            charts_remaining--;

                            // Check if we got all of the charts
                            if (charts_remaining == 0) {
                                // Yup, we got all of them
                                // Let's proceed to putting PDF together
                                // generatePDF();

                                var _layout = self.generateLayout(charts,ids);

                                chart["export"].toPDF(_layout, function (data) {
                                    this.download(data, "application/pdf", "GrowthChart of ".concat("@ViewBag.ClientDetail.ChildName",".pdf"));
                                });

                                $("#spinner").hide();
                            }
                        });
                    });
                }
            }


        },

        EditChildChrowth:function(data){

            console.log("data from chart", data);

            if (!data.hasOwnProperty("Age") || !data.hasOwnProperty("Height")) return false;

            $("#modal-edit-growth").modal("show")

        },
        generateLayout: function (charts, ids){


            var layout = {
                "content": [],
                footer: function (currentPage, pageCount) {
                    //return currentPage.toString() + ' of ' + pageCount;
                    return { text: currentPage, alignment: 'center' };
                },
            };

            layout.content.push({
                "text": "@Fingerprints.LocalResource.Resources.GrowthChartof  @ViewBag.ClientDetail.ChildName",
                "fontSize": 15,
                margin: [0, 0, 0, 25],
                decoration: 'underline',
            });

            layout.styles = {
                header: {
                    fontsize: '20px', color: '#333', alignment: 'center', bold: true
                }
            };
            ids.forEach(function (obj, i) {
                //ids = ["HeadCircuchart", "Heightchart", "Weightchart", "Weight_LengthtChart"];
                var _chartHeadtxt = "";
                if (obj == "HeadCircuchart") {
                    //  _chartHeadtxt = "Head Circumference vs Age";
                    _chartHeadtxt = _langList.HeadCircumferencevsAge;
                } else if (obj == "Heightchart") {
                    // _chartHeadtxt = "Length vs Age";
                    _chartHeadtxt = _langList.LengthvsAge;
                } else if (obj == "Weightchart") {
                    //_chartHeadtxt = "Weight vs Age"
                    _chartHeadtxt = _langList.WeightvsAge
                }  else if (obj == "BMIchart") {
                    _chartHeadtxt = _langList.BMI_Vs_Age;
                } else {
                    // _chartHeadtxt = "Weight vs Length";
                    _chartHeadtxt = _langList.WeightvsLength
                }
                layout.content.push({
                    "text": _chartHeadtxt,
                    style: 'header',
                    margin:i == 1 ? [0,50,0,0] : i == 3 ? [0,50,0,0] : []

                });
                layout.content.push({
                    "image": charts[obj].exportedImage,
                    "fit": i == 0 ? [523, 300] : i == 1 ? [523, 300] : [523, 300],
                    pageBreak: i == 1 ? 'after' : "",

                });
            });


            return layout;

        },
        getChartData: function () {
            var self = this;

            $.ajax({
                type: 'POST',
                url: self.urls._getGrowthChart.concat(self.cons.eClientId,'&type=', self.cons.type),
                contentType: 'application/json',
                dataType: 'json',
                beforeSend: function () { $("#spinner").show(); },
                success: function (data) {
                    //self.data = data;
                    data = JSON.parse(data);
                    self.renderChart(data);
                },
                error: function () {

                },
                complete: function () {
                    $("#spinner").hide();
                }
            })

        },
        convertCMtoInch: function (data,inputtype) {
            var self = this;
            var val = 0;
            if (inputtype == "2") {
                val = parseFloat(data);
            } else {
                val = parseFloat(data) * self.cons.oneCm;
            }
            return val.toFixed(2);
        },
        convertKGtoLbs: function (data, inputtype) {
            var self = this;
            var val = 0;
            if (inputtype == "2") {
                val = parseFloat(data);
            } else {
                val = parseFloat(data) * self.cons.oneKg;
            }
            return val.toFixed(2);
        },
        convertInchtoCM:function(data,type){
            var self = this;
            var val = 0;
            val = parseFloat(data) * 2.54;

            return val.toFixed(2);
        },
        convertLbstoKG:function(data){
            var self = this;
            var val = 0;

            val = parseFloat(data) * 0.453592;

            return val.toFixed(2);
        },
        roundHalf: function (n) {
            n = parseFloat(n);
            return Math.round(n * 2) / 2;
        },
        renderChart: function (data) {

            var self = this;
            var HeadCircData = [];

            if (!data.ChildGrowth) { data.ChildGrowth = []; }

            data.DTHeadCircuGrowth.forEach(function (obj, k) {

                var _tempObj = {
                    P3: self.convertCMtoInch(obj.P3,self.gInputType),
                    P5: self.convertCMtoInch(obj.P5,self.gInputType),
                    P10: self.convertCMtoInch(obj.P10,self.gInputType),
                    P25: self.convertCMtoInch(obj.P25,self.gInputType),
                    P50: self.convertCMtoInch(obj.P50,self.gInputType),
                    P75: self.convertCMtoInch(obj.P75,self.gInputType),
                    P90: self.convertCMtoInch(obj.P90,self.gInputType),
                    P95: self.convertCMtoInch(obj.P95,self.gInputType),
                    P98: self.convertCMtoInch(obj.P98,self.gInputType),
                    // Age: obj.AgeInMonth
                    Age: parseFloat(obj.AgeInMonth)
                    //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                };




                HeadCircData.push(_tempObj);


            });


            data.ChildGrowth.forEach(function (childObj, i) {
                var _inserted = false;
                HeadCircData.forEach(function (stdObj, k) {
                    var _HeadCirc = childObj.HeadCirc;

                    if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                        _HeadCirc = self.convertCMtoInch(childObj.HeadCirc);
                    } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                        _HeadCirc = self.convertInchtoCM(childObj.HeadCirc, 1);
                    }

                    if (stdObj.Age == parseFloat(childObj.Age) && childObj.HeadCirc > 0 && !_inserted) {

                        HeadCircData[k]["HeadCirc"] = _HeadCirc;
                        HeadCircData[k]["AssessmentDate"] = childObj.AssessmentDate;
                        _inserted = true;

                    } else if (childObj.HeadCirc > 0 && !_inserted && _.where(HeadCircData, { Age: childObj.Age }).length == 0) {

                        HeadCircData.push({ HeadCirc: _HeadCirc, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                        _inserted = true;

                    }
                });

            });

            HeadCircData = _.sortBy(HeadCircData, 'Age');






            // console.log(HeadCircData);


            self.data = data;

            // var HCY = self.gInputType == "2" ? "HeadCirc.(CM)" : "HeadCirc.(Inch)";
            var HCY = self.gInputType == "2" ? "" + _langList.HeadCircu + ".(CM)" : "" + _langList.HeadCircu +".(Inch)";


            var chart = AmCharts.makeChart("HeadCircuchart", {
                "hideCredits": true,
                "type": "xy",
                "theme": "absenceReportTheme",
                "legend":self.chartComn.legend,
                "responsive": {
                    "enabled": true
                },
                "graphs": [

                {
                    "bullet": "round",
                    "bulletBorderAlpha": 1,
                    "bulletColor": "#FFFFFF",
                    "bulletSize": 8,
                    "lineThickness": 2,
                    "title":_langList.ChildLength,
                    "type": "smoothedLine",
                    "useLineColorForBulletBorder": true,
                    "xField": "Age",
                    "yField": "HeadCirc",
                    "lineColor": "#040404",
                    "balloonFunction": function (item, content) {
                        console.log(item, content);
                        var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.HeadCirc + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                        return html;
                    },
                    "balloon": {
                        "enabled": true,

                        "fixedPosition": true,

                    }
                },


                      @{ var Percentail = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

            int i = 0;
        }
                  @foreach (var item in Percentail) {

                      <text>
                  {

                      "lineColor": "@_clrs[i]",
                      "lineThickness": 2,
                      "bullet": "",
                      "bulletBorderThickness": 1,
                      "hideBulletsCount": 30,
                      "type": "smoothedLine",
                      "title": "@item",
                      "xField": "Age",
                      "yField": "@item",
                      "fillAlphas": 0,
                      "balloon": {
                          "enabled": true
                      },
                      "valueAxis": "STDLengthAxis",
                      // "visibleInLegend":false, --show or hide legend label
                  },
                  </text>

                      i++;
                  }

    ],

                "valueAxes": self.chartComn.valueAxes(_langList.Age+'(M)',HCY),
                "dataProvider":HeadCircData,
                "export":self.chartComn.export,
                "chartCursor": self.chartComn.chartCursor,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "minValue":21

    });


           

            var HeightData = self.getHeightData();

            //console.log("height val", HeightData);

            // var HYLabel = self.gInputType == "2" ? "Length(CM)" : "Length(Inch)";
            var HYLabel = self.gInputType == "2" ?  '@Resources.LengthofCM' : '@Resources.LengthofInch';


            var heighchart = AmCharts.makeChart("Heightchart", {
                "hideCredits": true,
                "type": "xy",
                "theme": "absenceReportTheme",
                "legend":self.chartComn.legend,
                "responsive": {
                    "enabled": true
                },
                "graphs": [

                {
                    "bullet": "round",
                    "bulletBorderAlpha": 1,
                    "bulletColor": "#FFFFFF",
                    "bulletSize": 8,
                    "lineThickness": 2,
                    "title":_langList.ChildLength,
                    "type": "smoothedLine",
                    "useLineColorForBulletBorder": true,
                    "xField": "Age",
                    "yField": "Height",
                    "lineColor": "#040404",
                    "balloonFunction": function (item, content) {
                        var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.Height + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                        return html;
                    },
                    "balloon": {
                        "enabled": true,

                        "fixedPosition": true,

                    }
                },


                      @{ var Percentail2 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

        int k = 0;
        }
                  @foreach (var item in Percentail2) {

                              <text>
                          {

                              "lineColor": "@_clrs[k]",
                              "lineThickness": 2,
                              "bullet": "",
                              "bulletBorderThickness": 1,
                              "hideBulletsCount": 30,
                              "type": "smoothedLine",
                              "title": "@item",
                              "xField": "Age",
                              "yField": "@item",
                              "fillAlphas": 0,
                              "balloon": {
                                  "enabled": true
                              },
                              "valueAxis": "STDLengthAxis",
                              // "visibleInLegend":false, --show or hide legend label
                          },
                          </text>

                          k++;
                      }

                ],

                "valueAxes": self.chartComn.valueAxes(_langList.Age+'(M)',HYLabel),
                "dataProvider":HeightData,
                "export":self.chartComn.export,
                "chartCursor": self.chartComn.chartCursor,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "minValue":21

            });




            var WeightData = [];


            data.DTWeightGrowth.forEach(function (obj, k) {

                var _tempObj = {
                    P3: self.convertKGtoLbs(obj.P3,self.gInputType),
                    P5: self.convertKGtoLbs(obj.P5,self.gInputType),
                    P10: self.convertKGtoLbs(obj.P10, self.gInputType),
                    P25: self.convertKGtoLbs(obj.P25, self.gInputType),
                    P50: self.convertKGtoLbs(obj.P50, self.gInputType),
                    P75: self.convertKGtoLbs(obj.P75, self.gInputType),
                    P90: self.convertKGtoLbs(obj.P90, self.gInputType),
                    P95: self.convertKGtoLbs(obj.P95, self.gInputType),
                    P98: self.convertKGtoLbs(obj.P98, self.gInputType),
                    // Age: obj.AgeInMonth
                    Age: parseFloat(obj.AgeInMonth)
                    //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                };


                // if ((_tempObj.Age % 2) == 0) {

                WeightData.push(_tempObj);
                //}

            });


            data.ChildGrowth.forEach(function (childObj, i) {
                var _inserted = false;
                WeightData.forEach(function (stdObj, k) {


                    var _Weight = childObj.Weight;

                    if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                        //  _Weight = self.convertCMtoInch(childObj.Weight);
                        _Weight = self.convertKGtoLbs(childObj.Weight)
                    } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                        // _Weight = self.convertInchtoCM(childObj.Weight, 1);
                        _Weight = self.convertLbstoKG(childObj.Weight);
                    }

                    if (stdObj.Age == parseFloat(childObj.Age) && childObj.Weight > 0 && !_inserted) {

                        WeightData[k]["Weight"] = _Weight;
                        WeightData[k]["AssessmentDate"] = childObj.AssessmentDate;
                        _inserted = true;

                    } else if (childObj.Weight > 0 && !_inserted && _.where(WeightData, { Age: childObj.Age }).length == 0) {

                        WeightData.push({ Weight: _Weight, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                        _inserted = true;

                    }
                });

            });

            WeightData = _.sortBy(WeightData, 'Age');


            // console.log(WeightData);


            //  var WYLabel = self.gInputType == "2" ? "Weight(KG)" : "Weight(Pound)";
            var WYLabel = self.gInputType == "2" ? '@Resources.Weight_Kg' : '@Resources.Weight_Pound';



            var weightchart = AmCharts.makeChart("Weightchart", {
                "hideCredits": true,
                "type": "xy",
                "theme": "absenceReportTheme",
                "legend":self.chartComn.legend,
                "responsive": {
                    "enabled": true
                },
                "graphs": [

                {
                    "bullet": "round",
                    "bulletBorderAlpha": 1,
                    "bulletColor": "#FFFFFF",
                    "bulletSize": 8,
                    "lineThickness": 2,
                    "title": _langList.Child_Weight,
                    "type": "smoothedLine",
                    "useLineColorForBulletBorder": true,
                    "xField": "Age",
                    "yField":  "Weight",
                    "lineColor": "#040404",
                    "balloonFunction": function (item, content) {
                        console.log(item, content);
                        var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.Weight + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                        return html;
                    },
                    "balloon": {
                        "enabled": true,

                        "fixedPosition": true,

                    }
                },


                      @{ var Percentail3 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

            int l = 0;
        }
                  @foreach (var item in Percentail2) {

                      <text>
                  {

                      "lineColor": "@_clrs[l]",
                      "lineThickness": 2,
                      "bullet": "",
                      "bulletBorderThickness": 1,
                      "hideBulletsCount": 30,
                      "type": "smoothedLine",
                      "title": "@item",
                      "xField": "Age",
                      "yField": "@item",
                      "fillAlphas": 0,
                      "balloon": {
                          "enabled": true
                      },
                      "valueAxis": "STDLengthAxis",
                      "visibleInLegend":true, 
                      // "visibleInLegend":false, --show or hide legend label
                  },
                  </text>

                      l++;
                  }

    ],

                "valueAxes": self.chartComn.valueAxes(_langList.Age+'(M)',WYLabel),
               // "title": _langList.Age+"("+_langList.Month+")",
                "dataProvider":WeightData,
                "export":self.chartComn.export,
                "chartCursor": self.chartComn.chartCursor,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "minValue":21

    });


            var WeightLengthData = [];



            data.DTWeightLengthGrowth.forEach(function (obj, k) {

                var _tempObj = {
                    P3: self.convertKGtoLbs(obj.P3,self.gInputType),
                    P5: self.convertKGtoLbs(obj.P5,self.gInputType),
                    P10: self.convertKGtoLbs(obj.P10, self.gInputType),
                    P25: self.convertKGtoLbs(obj.P25, self.gInputType),
                    P50: self.convertKGtoLbs(obj.P50, self.gInputType),
                    P75: self.convertKGtoLbs(obj.P75, self.gInputType),
                    P90: self.convertKGtoLbs(obj.P90, self.gInputType),
                    P95: self.convertKGtoLbs(obj.P95, self.gInputType),
                    P98: self.convertKGtoLbs(obj.P98, self.gInputType),
                    //Age: obj.AgeInMonth
                    //Length: self.convertCMtoInch(obj.Length)
                    Length:parseFloat( self.convertCMtoInch(obj.Length,self.gInputType))

                    //Age: AmCharts.formatDate(new Date(obj.AssessmentDate), "MMM-DD"),
                };

                WeightLengthData.push(_tempObj);

            });


            data.ChildGrowth.forEach(function (orObj, ind) {
                var _stdLength = orObj.Height;
                var _stdWeight = orObj.Weight;

                if (orObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                    _stdLength = self.convertCMtoInch(orObj.Height);

                } else if (orObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                    _stdLength = self.convertInchtoCM(orObj.Height, 1);
                    // _Weight = self.convertLbstoKG(childObj.Weight);
                }

                if (orObj.InputType == "2" && self.gInputType == "1") {  //data in kg but g option in lbs
                    _stdWeight = self.convertKGtoLbs(orObj.Weight, self.gInputType);
                } else if (orObj.InputType == "1" && self.gInputType == "2") {  //data in Lbs but option in KG
                    _stdWeight = self.convertLbstoKG(orObj.Weight);
                }


                console.log(_stdLength, orObj);

                if (_stdWeight && _stdLength) {
                    WeightLengthData.push({ ChildWeight: _stdWeight, AssessmentDate: orObj.AssessmentDate, Length: parseFloat(_stdLength) });
                }

            });

            WeightLengthData = _.sortBy(WeightLengthData, 'Length');

            console.log('weight length',WeightLengthData);


            //var WLXLabel = self.gInputType == "2" ? "Length(CM)" : "Length(Inch)";
            //var WLYLabel = self.gInputType == "2" ? "Weight(KG)" : "Weight(Pound)";
            var WLXLabel = self.gInputType == "2" ? "@Resources.LengthofCM" : "@Resources.LengthofInch";
            var WLYLabel = self.gInputType == "2" ? "@Resources.Weight_Kg" : "@Resources.Weight_Pound";

            var WeightLengthtChart = AmCharts.makeChart("Weight_LengthtChart", {
                "hideCredits": true,
                "type": "xy",
                "theme": "absenceReportTheme",
                "legend":self.chartComn.legend,
                "responsive": {
                    "enabled": true
                },
                "graphs": [

                {
                    "bullet": "round",
                    "bulletBorderAlpha": 1,
                    "bulletColor": "#FFFFFF",
                    "bulletSize": 8,
                    "lineThickness": 2,
                    //"title": _langList.Child_Length,
                    "title": WLXLabel,
                    "type": "smoothedLine",
                    "useLineColorForBulletBorder": true,
                    "xField": "Length",
                    "yField":  "ChildWeight",
                    "lineColor": "#040404",
                    "balloonFunction": function (item, content) {
                        console.log(item, content);
                        var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Length : ' + item.dataContext.Length + '</b> </p><p><b> Weight :' + item.dataContext.ChildWeight + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                        return html;
                    },
                    "balloon": {
                        "enabled": true,

                        "fixedPosition": true,

                    }
                },


                      @{ var Percentail4 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

            int m = 0;
        }
                  @foreach (var item in Percentail4) {

                      <text>
                  {

                      "lineColor": "@_clrs[m]",
                      "lineThickness": 2,
                      "bullet": "",
                      "bulletBorderThickness": 1,
                      "hideBulletsCount": 30,
                      "type": "smoothedLine",
                      "title": "@item",
                      "xField": "Length",
                      "yField": "@item",
                      "fillAlphas": 0,
                      "balloon": {
                          "enabled": true
                      },
                      "valueAxis": "STDLengthAxis",
                      "visibleInLegend":true, 
                      // "visibleInLegend":false, --show or hide legend label
                  },
                  </text>

                      m++;
                  }

    ],

                "valueAxes": self.chartComn.valueAxes(_langList.Age+'(M)',WYLabel),
               // "title": _langList.Age+"("+_langList.Month+")",
                "dataProvider":WeightLengthData,
                "export":self.chartComn.export,
                "chartCursor": self.chartComn.chartCursor,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "minValue":21

    });

            

            //BMI VS Age

            var BMIData = [];


            data.DTBMIGrowth.forEach(function (obj, k) {

                var _tempObj = {
                    P3:  obj.P3,
                    P5:  obj.P5,
                    P10: obj.P10,
                    P25: obj.P25,
                    P50: obj.P50,
                    P75: obj.P75,
                    P90: obj.P90,
                    P95: obj.P95,
                    P98: obj.P98,
                    Age: parseFloat( obj.AgeInMonth)
                };



                // if ((_tempObj.Age % 2) == 0) {

                BMIData.push(_tempObj);
                //}

            });

            data.ChildGrowth.forEach(function (childObj, i) {
                var _inserted = false;
                BMIData.forEach(function (stdObj, k) {



                    if (stdObj.Age == parseFloat(childObj.Age) && childObj.BMI > 0 && !_inserted) {

                        BMIData[k]["BMI"] = childObj.BMI;
                        BMIData[k]["AssessmentDate"] = childObj.AssessmentDate;
                        _inserted = true;

                    } else if (childObj.BMI > 0 && !_inserted && _.where(BMIData, { Age: childObj.Age }).length == 0) {

                        BMIData.push({ BMI: childObj.BMI, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                        _inserted = true;

                    }
                });

            });

            BMIData = _.sortBy(BMIData, 'Age');

            var bmichart = AmCharts.makeChart("BMIchart", {
                "hideCredits": true,
                "type": "xy",
                "theme": "absenceReportTheme",
                "legend":self.chartComn.legend,
                "responsive": {
                    "enabled": true
                },
                "graphs": [

                {
                    "bullet": "round",
                    "bulletBorderAlpha": 1,
                    "bulletColor": "#FFFFFF",
                    "bulletSize": 8,
                    "lineThickness": 2,
                    "title": "BMI",
                    "type": "smoothedLine",
                    "useLineColorForBulletBorder": true,
                    "xField": "Age",
                    "yField":  "BMI",
                    "lineColor": "#040404",
                    "balloonFunction": function (item, content) {
                        // console.log(item, content);
                        var html = '<p style="font-size: 120%; font-weight: bold;"> <p style=""><b>Age : ' + item.dataContext.Age + '(M)</b> </p><p><b> ' + content.title + ' :' + item.dataContext.BMI + '</b></p><p><b> Date :' + item.dataContext.AssessmentDate + '</b></p></p>';
                        return html;
                    },
                    "balloon": {
                        "enabled": true,

                        "fixedPosition": true,

                    }
                },


                      @{ var Percentail6 = new string[9] { "P3", "P5", "P10", "P25", "P50", "P75", "P90", "P95", "P98" };

            int t = 0;
        }
                  @foreach (var item in Percentail6) {

                      <text>
                  {

                      "lineColor": "@_clrs[t]",
                      "lineThickness": 2,
                      "bullet": "",
                      "bulletBorderThickness": 1,
                      "hideBulletsCount": 30,
                      "type": "smoothedLine",
                      "title": "@item",
                      "xField": "Age",
                      "yField": "@item",
                      "fillAlphas": 0,
                      "balloon": {
                          "enabled": true
                      },
                      "valueAxis": "STDLengthAxis",
                       "visibleInLegend":true, //show or hide legend label
                  },
                  </text>

                      t++;
                  }

    ],

                "valueAxes": self.chartComn.valueAxes(_langList.Age+'(M)',"BMI"),
               // "title": _langList.Age+"("+_langList.Month+")",
                "dataProvider":BMIData,
                "export":self.chartComn.export,
                "chartCursor": self.chartComn.chartCursor,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "minValue":21

    });


            //chart.addListener("rendered", function (zoomChart) {

            //    console.log(zoomChart);
            //    if (chart) {
            //        chart.zoomToIndexes(dataLength - 8, dataLength);

            //    }

            //});


            $("#spinner").hide();
        },
        getHeightData(){

            var self = this;
            var data = self.data;

            var HeightData=[];

            data.DTLengthGrowth.forEach(function (obj, k) {

                var _tempObj = {
                    P3: self.convertCMtoInch(obj.P3,self.gInputType),
                    P5: self.convertCMtoInch(obj.P5, self.gInputType),
                    P10: self.convertCMtoInch(obj.P10, self.gInputType),
                    P25: self.convertCMtoInch(obj.P25, self.gInputType),
                    P50: self.convertCMtoInch(obj.P50, self.gInputType),
                    P75: self.convertCMtoInch(obj.P75, self.gInputType),
                    P90: self.convertCMtoInch(obj.P90, self.gInputType),
                    P95: self.convertCMtoInch(obj.P95, self.gInputType),
                    P98: self.convertCMtoInch(obj.P98, self.gInputType),
                    Age: parseFloat( obj.AgeInMonth)
                };

                HeightData.push(_tempObj);

            });

            data.ChildGrowth.forEach(function (childObj, i) {
                var _inserted = false;
                HeightData.forEach(function (stdObj, k) {

                    var _Height = childObj.Height;

                    if (childObj.InputType == 2 && self.gInputType == "1") { //if data in metric and globe in imperial

                        _Height = self.convertCMtoInch(childObj.Height);
                    } else if (childObj.InputType == 1 && self.gInputType == "2") { //if data in imperial and globe in metric
                        _Height = self.convertInchtoCM(childObj.Height, 1);
                    }

                    if (stdObj.Age == parseFloat(childObj.Age) && childObj.Height > 0 && !_inserted) {

                        HeightData[k]["Height"] = _Height;
                        HeightData[k]["AssessmentDate"] = childObj.AssessmentDate;
                        _inserted = true;

                    } else if (childObj.Height > 0 && !_inserted && _.where(HeightData, { Age: childObj.Age }).length == 0) {

                        HeightData.push({ Height: _Height, Age: parseFloat(childObj.Age), AssessmentDate: childObj.AssessmentDate });
                        _inserted = true;

                    }
                });

            });


            return  _.sortBy(HeightData, 'Age');
        },


    };



    $(document).ready(function () {

        setTimeout(function () {
            _GCObj.init();
        }, 0);

    });


</script>



<div class="modal fade scroll-modal" id="modal-edit-growth" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-ch">
        <div class="modal-content">

            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal"><img src="/Content/CaseNote/images/close.png"></button>
                <h2 id="CaseNoteHeading" class="extra-title muted">Edit Child Growth</h2>
                <form id="formEditInkind" enctype="multipart/form-data">

                    <div class="max_items_addn popup-addn-scroll">




                        <div class="form-group col-xs-12">
                            <label for="inkindActivityDate" class="col-md-4 col-lg-2 col-xs-12" style="color:#295b8f;">Assessment Date <sup style="color:red;">*</sup></label>
                            <div class="col-md-7 col-sm-11 col-lg-5 col-xs-12">

                                <div class="input-group date">
                                    <input type="text" class="form-control ersa-date-input" maxlength="12" placeholder="MM/DD/YYYY" id="inkindActivityDate">
                                    <span class="input-group-addon datepicker-icon" id="1" style="cursor:pointer;">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>



                            </div>

                        </div>

                        <div class="form-group col-xs-12">
                            <label for="inkindActivityDate" class="col-md-4 col-lg-2 col-xs-12" style="color:#295b8f;">Height <sup style="color:red;">*</sup></label>
                            <div class="col-md-7 col-sm-11 col-lg-5 col-xs-12">

                                <input type="text" class="form-control" />



                            </div>

                        </div>




                    </div>



                    <div class="form-group final-btn text-center glossy_btn adddivspace">

                        <button class="glossy-button-button button-green" type="button" id="btn-modal-submit">
                            <span class="glossy-button-after"></span>
                            <span class="glossy-button-before"></span>
                            Save
                        </button>
                        <button class="glossy-button-button button-red" type="button" id="btn-modal-cancel" data-dismiss="modal">
                            <span class="glossy-button-after"></span>
                            <span class="glossy-button-before"></span>
                            Exit
                        </button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
